"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var constants_1 = require("./constants");
var web3_wrapper_1 = require("./web3_wrapper");
var firstAccount;
/**
 * Increases time by the given number of seconds and then mines a block so that
 * the current block timestamp has the offset applied.
 * @param seconds the number of seconds by which to incrase the time offset.
 * @returns a new Promise which will resolve with the new total time offset or
 * reject if the time could not be increased.
 */
function increaseTimeAndMineBlockAsync(seconds) {
    return __awaiter(this, void 0, void 0, function () {
        var accounts, offset, _a, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!_.isUndefined(firstAccount)) return [3 /*break*/, 2];
                    return [4 /*yield*/, web3_wrapper_1.web3Wrapper.getAvailableAddressesAsync()];
                case 1:
                    accounts = _c.sent();
                    firstAccount = accounts[0];
                    _c.label = 2;
                case 2: return [4 /*yield*/, web3_wrapper_1.web3Wrapper.increaseTimeAsync(seconds)];
                case 3:
                    offset = _c.sent();
                    _b = (_a = web3_wrapper_1.web3Wrapper).awaitTransactionSuccessAsync;
                    return [4 /*yield*/, web3_wrapper_1.web3Wrapper.sendTransactionAsync({ from: firstAccount, to: firstAccount, value: 0 })];
                case 4: 
                // Note: we need to send a transaction after increasing time so
                // that a block is actually mined. The contract looks at the
                // last mined block for the timestamp.
                return [4 /*yield*/, _b.apply(_a, [_c.sent(),
                        constants_1.constants.AWAIT_TRANSACTION_MINED_MS])];
                case 5:
                    // Note: we need to send a transaction after increasing time so
                    // that a block is actually mined. The contract looks at the
                    // last mined block for the timestamp.
                    _c.sent();
                    return [2 /*return*/, offset];
            }
        });
    });
}
exports.increaseTimeAndMineBlockAsync = increaseTimeAndMineBlockAsync;
/**
 * Returns the timestamp of the latest block in seconds since the Unix epoch.
 * @returns a new Promise which will resolve with the timestamp in seconds.
 */
function getLatestBlockTimestampAsync() {
    return __awaiter(this, void 0, void 0, function () {
        var currentBlockIfExists;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, web3_wrapper_1.web3Wrapper.getBlockIfExistsAsync('latest')];
                case 1:
                    currentBlockIfExists = _a.sent();
                    if (_.isUndefined(currentBlockIfExists)) {
                        throw new Error("Unable to fetch latest block.");
                    }
                    return [2 /*return*/, currentBlockIfExists.timestamp];
            }
        });
    });
}
exports.getLatestBlockTimestampAsync = getLatestBlockTimestampAsync;
//# sourceMappingURL=block_timestamp.js.map