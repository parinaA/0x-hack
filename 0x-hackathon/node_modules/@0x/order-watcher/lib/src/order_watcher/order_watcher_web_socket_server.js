"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_schemas_1 = require("@0x/json-schemas");
var utils_1 = require("@0x/utils");
var http = require("http");
var WebSocket = require("websocket");
var types_1 = require("../types");
var assert_1 = require("../utils/assert");
var order_watcher_1 = require("./order_watcher");
var DEFAULT_HTTP_PORT = 8080;
var JSON_RPC_VERSION = '2.0';
// Wraps the OrderWatcher functionality in a WebSocket server. Motivations:
// 1) Users can watch orders via non-typescript programs.
// 2) Better encapsulation so that users can work
var OrderWatcherWebSocketServer = /** @class */ (function () {
    /**
     * Instantiate a new WebSocket server which provides OrderWatcher functionality
     *  @param provider Web3 provider to use for JSON RPC calls.
     *  @param networkId NetworkId to watch orders on.
     *  @param contractAddresses Optional contract addresses. Defaults to known
     *  addresses based on networkId.
     *  @param orderWatcherConfig OrderWatcher configurations. isVerbose sets the verbosity for the WebSocket server aswell.
     *  @param isVerbose Whether to enable verbose logging. Defaults to true.
     */
    function OrderWatcherWebSocketServer(provider, networkId, contractAddresses, orderWatcherConfig) {
        var _this = this;
        this._isVerbose =
            orderWatcherConfig !== undefined && orderWatcherConfig.isVerbose !== undefined
                ? orderWatcherConfig.isVerbose
                : true;
        this._orderWatcher = new order_watcher_1.OrderWatcher(provider, networkId, contractAddresses, orderWatcherConfig);
        this._connectionStore = new Set();
        this._httpServer = http.createServer();
        this._wsServer = new WebSocket.server({
            httpServer: this._httpServer,
            // Avoid setting autoAcceptConnections to true as it defeats all
            // standard cross-origin protection facilities built into the protocol
            // and the browser.
            // Source: https://www.npmjs.com/package/websocket#server-example
            // Also ensures that a request event is emitted by
            // the server whenever a new WebSocket request is made.
            autoAcceptConnections: false,
        });
        this._wsServer.on('request', function (request) { return __awaiter(_this, void 0, void 0, function () {
            var connection;
            return __generator(this, function (_a) {
                connection = request.accept(null, request.origin);
                this._log(new Date() + " [Server] Accepted connection from origin " + request.origin + ".");
                connection.on('message', this._onMessageCallbackAsync.bind(this, connection));
                connection.on('close', this._onCloseCallback.bind(this, connection));
                this._connectionStore.add(connection);
                return [2 /*return*/];
            });
        }); });
    }
    /**
     *  Recover types lost when the payload is stringified.
     */
    OrderWatcherWebSocketServer._parseSignedOrder = function (rawRequest) {
        var e_1, _a;
        var bigNumberFields = [
            'salt',
            'makerFee',
            'takerFee',
            'makerAssetAmount',
            'takerAssetAmount',
            'expirationTimeSeconds',
        ];
        try {
            for (var bigNumberFields_1 = __values(bigNumberFields), bigNumberFields_1_1 = bigNumberFields_1.next(); !bigNumberFields_1_1.done; bigNumberFields_1_1 = bigNumberFields_1.next()) {
                var field = bigNumberFields_1_1.value;
                rawRequest[field] = new utils_1.BigNumber(rawRequest[field]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (bigNumberFields_1_1 && !bigNumberFields_1_1.done && (_a = bigNumberFields_1.return)) _a.call(bigNumberFields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return rawRequest;
    };
    /**
     * Activates the WebSocket server by subscribing to the OrderWatcher and
     * starting the WebSocket's HTTP server
     */
    OrderWatcherWebSocketServer.prototype.start = function () {
        var _this = this;
        // Have the WebSocket server subscribe to the OrderWatcher to receive updates.
        // These updates are then broadcast to clients in the _connectionStore.
        this._orderWatcher.subscribe(this._broadcastCallback.bind(this));
        var port = process.env.ORDER_WATCHER_HTTP_PORT || DEFAULT_HTTP_PORT;
        this._httpServer.listen(port, function () {
            _this._log(new Date() + " [Server] Listening on port " + port);
        });
    };
    /**
     * Deactivates the WebSocket server by stopping the HTTP server from accepting
     * new connections and unsubscribing from the OrderWatcher
     */
    OrderWatcherWebSocketServer.prototype.stop = function () {
        this._httpServer.close();
        this._orderWatcher.unsubscribe();
    };
    OrderWatcherWebSocketServer.prototype._log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this._isVerbose) {
            utils_1.logUtils.log.apply(utils_1.logUtils, __spread(args));
        }
    };
    OrderWatcherWebSocketServer.prototype._onMessageCallbackAsync = function (connection, message) {
        return __awaiter(this, void 0, void 0, function () {
            var response, id, request, _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        id = null;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        assert_1.assert.doesConformToSchema('message', message, json_schemas_1.schemas.orderWatcherWebSocketUtf8MessageSchema);
                        request = JSON.parse(message.utf8Data);
                        id = request.id;
                        assert_1.assert.doesConformToSchema('request', request, json_schemas_1.schemas.orderWatcherWebSocketRequestSchema);
                        assert_1.assert.isString(request.jsonrpc, JSON_RPC_VERSION);
                        _a = {
                            id: id,
                            jsonrpc: JSON_RPC_VERSION,
                            method: request.method
                        };
                        return [4 /*yield*/, this._routeRequestAsync(request)];
                    case 2:
                        response = (_a.result = _b.sent(),
                            _a);
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _b.sent();
                        response = {
                            id: id,
                            jsonrpc: JSON_RPC_VERSION,
                            method: null,
                            error: err_1.toString(),
                        };
                        return [3 /*break*/, 4];
                    case 4:
                        this._log(new Date() + " [Server] OrderWatcher output: " + JSON.stringify(response));
                        connection.sendUTF(JSON.stringify(response));
                        return [2 /*return*/];
                }
            });
        });
    };
    OrderWatcherWebSocketServer.prototype._onCloseCallback = function (connection) {
        this._connectionStore.delete(connection);
        this._log(new Date() + " [Server] Client " + connection.remoteAddress + " disconnected.");
    };
    OrderWatcherWebSocketServer.prototype._routeRequestAsync = function (request) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, signedOrder;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this._log(new Date() + " [Server] Request received: " + request.method);
                        _a = request.method;
                        switch (_a) {
                            case types_1.OrderWatcherMethod.AddOrder: return [3 /*break*/, 1];
                            case types_1.OrderWatcherMethod.RemoveOrder: return [3 /*break*/, 3];
                            case types_1.OrderWatcherMethod.GetStats: return [3 /*break*/, 4];
                        }
                        return [3 /*break*/, 5];
                    case 1:
                        signedOrder = OrderWatcherWebSocketServer._parseSignedOrder(request.params.signedOrder);
                        return [4 /*yield*/, this._orderWatcher.addOrderAsync(signedOrder)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 3:
                        {
                            this._orderWatcher.removeOrder(request.params.orderHash || 'undefined');
                            return [3 /*break*/, 6];
                        }
                        _b.label = 4;
                    case 4:
                        {
                            return [2 /*return*/, this._orderWatcher.getStats()];
                        }
                        _b.label = 5;
                    case 5: 
                    // Should never reach here. Should be caught by JSON schema check.
                    throw new Error("Unexpected default case hit for request.method");
                    case 6: return [2 /*return*/, undefined];
                }
            });
        });
    };
    /**
     * Broadcasts OrderState changes to ALL connected clients. At the moment,
     * we do not support clients subscribing to only a subset of orders. As such,
     * Client B will be notified of changes to an order that Client A added.
     */
    OrderWatcherWebSocketServer.prototype._broadcastCallback = function (err, orderState) {
        var method = types_1.OrderWatcherMethod.Update;
        var response = err === null
            ? {
                jsonrpc: JSON_RPC_VERSION,
                method: method,
                result: orderState,
            }
            : {
                jsonrpc: JSON_RPC_VERSION,
                method: method,
                error: {
                    code: -32000,
                    message: err.message,
                },
            };
        this._connectionStore.forEach(function (connection) {
            connection.sendUTF(JSON.stringify(response));
        });
    };
    return OrderWatcherWebSocketServer;
}());
exports.OrderWatcherWebSocketServer = OrderWatcherWebSocketServer;
//# sourceMappingURL=order_watcher_web_socket_server.js.map