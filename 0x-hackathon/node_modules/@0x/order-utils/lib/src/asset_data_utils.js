"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("@0x/types");
var utils_1 = require("@0x/utils");
var _ = require("lodash");
var constants_1 = require("./constants");
var encodingRules = { shouldOptimize: true };
var decodingRules = { shouldConvertStructsToObjects: true };
exports.assetDataUtils = {
    /**
     * Encodes an ERC20 token address into a hex encoded assetData string, usable in the makerAssetData or
     * takerAssetData fields in a 0x order.
     * @param tokenAddress  The ERC20 token address to encode
     * @return The hex encoded assetData string
     */
    encodeERC20AssetData: function (tokenAddress) {
        var abiEncoder = new utils_1.AbiEncoder.Method(constants_1.constants.ERC20_METHOD_ABI);
        var args = [tokenAddress];
        var assetData = abiEncoder.encode(args, encodingRules);
        return assetData;
    },
    /**
     * Decodes an ERC20 assetData hex string into it's corresponding ERC20 tokenAddress & assetProxyId
     * @param assetData Hex encoded assetData string to decode
     * @return An object containing the decoded tokenAddress & assetProxyId
     */
    decodeERC20AssetData: function (assetData) {
        exports.assetDataUtils.assertIsERC20AssetData(assetData);
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        var abiEncoder = new utils_1.AbiEncoder.Method(constants_1.constants.ERC20_METHOD_ABI);
        var decodedAssetData = abiEncoder.decode(assetData, decodingRules);
        return {
            assetProxyId: assetProxyId,
            // TODO(abandeali1): fix return types for `AbiEncoder.Method.decode` so that we can remove type assertion
            tokenAddress: decodedAssetData.tokenContract,
        };
    },
    /**
     * Encodes an ERC721 token address into a hex encoded assetData string, usable in the makerAssetData or
     * takerAssetData fields in a 0x order.
     * @param tokenAddress  The ERC721 token address to encode
     * @param tokenId  The ERC721 tokenId to encode
     * @return The hex encoded assetData string
     */
    encodeERC721AssetData: function (tokenAddress, tokenId) {
        var abiEncoder = new utils_1.AbiEncoder.Method(constants_1.constants.ERC721_METHOD_ABI);
        var args = [tokenAddress, tokenId];
        var assetData = abiEncoder.encode(args, encodingRules);
        return assetData;
    },
    /**
     * Decodes an ERC721 assetData hex string into it's corresponding ERC721 tokenAddress, tokenId & assetProxyId
     * @param assetData Hex encoded assetData string to decode
     * @return An object containing the decoded tokenAddress, tokenId & assetProxyId
     */
    decodeERC721AssetData: function (assetData) {
        exports.assetDataUtils.assertIsERC721AssetData(assetData);
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        var abiEncoder = new utils_1.AbiEncoder.Method(constants_1.constants.ERC721_METHOD_ABI);
        var decodedAssetData = abiEncoder.decode(assetData, decodingRules);
        return {
            assetProxyId: assetProxyId,
            // TODO(abandeali1): fix return types for `AbiEncoder.Method.decode` so that we can remove type assertion
            tokenAddress: decodedAssetData.tokenContract,
            tokenId: decodedAssetData.tokenId,
        };
    },
    /**
     * Encodes assetData for multiple AssetProxies into a single hex encoded assetData string, usable in the makerAssetData or
     * takerAssetData fields in a 0x order.
     * @param amounts Amounts of each asset that correspond to a single unit within an order.
     * @param nestedAssetData assetData strings that correspond to a valid assetProxyId.
     * @return The hex encoded assetData string
     */
    encodeMultiAssetData: function (amounts, nestedAssetData) {
        if (amounts.length !== nestedAssetData.length) {
            throw new Error("Invalid MultiAsset arguments. Expected length of 'amounts' (" + amounts.length + ") to equal length of 'nestedAssetData' (" + nestedAssetData.length + ")");
        }
        _.forEach(nestedAssetData, function (assetDataElement) { return exports.assetDataUtils.validateAssetDataOrThrow(assetDataElement); });
        var abiEncoder = new utils_1.AbiEncoder.Method(constants_1.constants.MULTI_ASSET_METHOD_ABI);
        var args = [amounts, nestedAssetData];
        var assetData = abiEncoder.encode(args, encodingRules);
        return assetData;
    },
    /**
     * Decodes a MultiAsset assetData hex string into it's corresponding amounts and nestedAssetData
     * @param assetData Hex encoded assetData string to decode
     * @return An object containing the decoded amounts and nestedAssetData
     */
    decodeMultiAssetData: function (assetData) {
        exports.assetDataUtils.assertIsMultiAssetData(assetData);
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        var abiEncoder = new utils_1.AbiEncoder.Method(constants_1.constants.MULTI_ASSET_METHOD_ABI);
        var decodedAssetData = abiEncoder.decode(assetData, decodingRules);
        // TODO(abandeali1): fix return types for `AbiEncoder.Method.decode` so that we can remove type assertion
        var amounts = decodedAssetData.amounts;
        var nestedAssetData = decodedAssetData.nestedAssetData;
        if (amounts.length !== nestedAssetData.length) {
            throw new Error("Invalid MultiAsset assetData. Expected length of 'amounts' (" + amounts.length + ") to equal length of 'nestedAssetData' (" + nestedAssetData.length + ")");
        }
        return {
            assetProxyId: assetProxyId,
            amounts: amounts,
            nestedAssetData: nestedAssetData,
        };
    },
    /**
     * Decodes a MultiAsset assetData hex string into it's corresponding amounts and decoded nestedAssetData elements (all nested elements are flattened)
     * @param assetData Hex encoded assetData string to decode
     * @return An object containing the decoded amounts and nestedAssetData
     */
    decodeMultiAssetDataRecursively: function (assetData) {
        var decodedAssetData = exports.assetDataUtils.decodeMultiAssetData(assetData);
        var amounts = [];
        var decodedNestedAssetData = _.map(decodedAssetData.nestedAssetData, function (nestedAssetDataElement, index) {
            var decodedNestedAssetDataElement = exports.assetDataUtils.decodeAssetDataOrThrow(nestedAssetDataElement);
            if (decodedNestedAssetDataElement.assetProxyId === types_1.AssetProxyId.MultiAsset) {
                var recursivelyDecodedAssetData = exports.assetDataUtils.decodeMultiAssetDataRecursively(nestedAssetDataElement);
                amounts.push(_.map(recursivelyDecodedAssetData.amounts, function (amountElement) {
                    return amountElement.times(decodedAssetData.amounts[index]);
                }));
                return recursivelyDecodedAssetData.nestedAssetData;
            }
            else {
                amounts.push(decodedAssetData.amounts[index]);
                return decodedNestedAssetDataElement;
            }
        });
        var flattenedAmounts = _.flattenDeep(amounts);
        var flattenedDecodedNestedAssetData = _.flattenDeep(decodedNestedAssetData);
        return {
            assetProxyId: decodedAssetData.assetProxyId,
            amounts: flattenedAmounts,
            // tslint:disable-next-line:no-unnecessary-type-assertion
            nestedAssetData: flattenedDecodedNestedAssetData,
        };
    },
    /**
     * Decode and return the assetProxyId from the assetData
     * @param assetData Hex encoded assetData string to decode
     * @return The assetProxyId
     */
    decodeAssetProxyId: function (assetData) {
        if (assetData.length < constants_1.constants.SELECTOR_CHAR_LENGTH_WITH_PREFIX) {
            throw new Error("Could not decode assetData. Expected length of encoded data to be at least 10. Got " + assetData.length);
        }
        var assetProxyId = assetData.slice(0, constants_1.constants.SELECTOR_CHAR_LENGTH_WITH_PREFIX);
        if (assetProxyId !== types_1.AssetProxyId.ERC20 &&
            assetProxyId !== types_1.AssetProxyId.ERC721 &&
            assetProxyId !== types_1.AssetProxyId.MultiAsset) {
            throw new Error("Invalid assetProxyId: " + assetProxyId);
        }
        return assetProxyId;
    },
    /**
     * Checks if the decoded asset data is valid ERC20 data
     * @param decodedAssetData The decoded asset data to check
     */
    isERC20AssetData: function (decodedAssetData) {
        return decodedAssetData.assetProxyId === types_1.AssetProxyId.ERC20;
    },
    /**
     * Checks if the decoded asset data is valid ERC721 data
     * @param decodedAssetData The decoded asset data to check
     */
    isERC721AssetData: function (decodedAssetData) {
        return decodedAssetData.assetProxyId === types_1.AssetProxyId.ERC721;
    },
    /**
     * Checks if the decoded asset data is valid MultiAsset data
     * @param decodedAssetData The decoded asset data to check
     */
    isMultiAssetData: function (decodedAssetData) {
        return decodedAssetData.assetProxyId === types_1.AssetProxyId.MultiAsset;
    },
    /**
     * Throws if the length or assetProxyId are invalid for the ERC20Proxy.
     * @param assetData Hex encoded assetData string
     */
    assertIsERC20AssetData: function (assetData) {
        if (assetData.length < constants_1.constants.ERC20_ASSET_DATA_MIN_CHAR_LENGTH_WITH_PREFIX) {
            throw new Error("Could not decode ERC20 Proxy Data. Expected length of encoded data to be at least " + constants_1.constants.ERC20_ASSET_DATA_MIN_CHAR_LENGTH_WITH_PREFIX + ". Got " + assetData.length);
        }
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        if (assetProxyId !== types_1.AssetProxyId.ERC20) {
            throw new Error("Could not decode ERC20 assetData. Expected assetProxyId to be ERC20 (" + types_1.AssetProxyId.ERC20 + "), but got " + assetProxyId);
        }
    },
    /**
     * Throws if the length or assetProxyId are invalid for the ERC721Proxy.
     * @param assetData Hex encoded assetData string
     */
    assertIsERC721AssetData: function (assetData) {
        if (assetData.length < constants_1.constants.ERC721_ASSET_DATA_MIN_CHAR_LENGTH_WITH_PREFIX) {
            throw new Error("Could not decode ERC721 assetData. Expected length of encoded data to be at least " + constants_1.constants.ERC721_ASSET_DATA_MIN_CHAR_LENGTH_WITH_PREFIX + ". Got " + assetData.length);
        }
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        if (assetProxyId !== types_1.AssetProxyId.ERC721) {
            throw new Error("Could not decode ERC721 assetData. Expected assetProxyId to be ERC721 (" + types_1.AssetProxyId.ERC721 + "), but got " + assetProxyId);
        }
    },
    /**
     * Throws if the length or assetProxyId are invalid for the MultiAssetProxy.
     * @param assetData Hex encoded assetData string
     */
    assertIsMultiAssetData: function (assetData) {
        if (assetData.length < constants_1.constants.MULTI_ASSET_DATA_MIN_CHAR_LENGTH_WITH_PREFIX) {
            throw new Error("Could not decode MultiAsset assetData. Expected length of encoded data to be at least " + constants_1.constants.MULTI_ASSET_DATA_MIN_CHAR_LENGTH_WITH_PREFIX + ". Got " + assetData.length);
        }
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        if (assetProxyId !== types_1.AssetProxyId.MultiAsset) {
            throw new Error("Could not decode MultiAsset assetData. Expected assetProxyId to be MultiAsset (" + types_1.AssetProxyId.MultiAsset + "), but got " + assetProxyId);
        }
    },
    /**
     * Throws if the length or assetProxyId are invalid for the corresponding AssetProxy.
     * @param assetData Hex encoded assetData string
     */
    validateAssetDataOrThrow: function (assetData) {
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        switch (assetProxyId) {
            case types_1.AssetProxyId.ERC20:
                exports.assetDataUtils.assertIsERC20AssetData(assetData);
                break;
            case types_1.AssetProxyId.ERC721:
                exports.assetDataUtils.assertIsERC721AssetData(assetData);
                break;
            case types_1.AssetProxyId.MultiAsset:
                exports.assetDataUtils.assertIsMultiAssetData(assetData);
                break;
            default:
                throw new Error("Unrecognized asset proxy id: " + assetProxyId);
        }
    },
    /**
     * Decode any assetData into it's corresponding assetData object
     * @param assetData Hex encoded assetData string to decode
     * @return Either a ERC20 or ERC721 assetData object
     */
    decodeAssetDataOrThrow: function (assetData) {
        var assetProxyId = exports.assetDataUtils.decodeAssetProxyId(assetData);
        switch (assetProxyId) {
            case types_1.AssetProxyId.ERC20:
                var erc20AssetData = exports.assetDataUtils.decodeERC20AssetData(assetData);
                return erc20AssetData;
            case types_1.AssetProxyId.ERC721:
                var erc721AssetData = exports.assetDataUtils.decodeERC721AssetData(assetData);
                return erc721AssetData;
            case types_1.AssetProxyId.MultiAsset:
                var multiAssetData = exports.assetDataUtils.decodeMultiAssetData(assetData);
                return multiAssetData;
            default:
                throw new Error("Unrecognized asset proxy id: " + assetProxyId);
        }
    },
};
//# sourceMappingURL=asset_data_utils.js.map