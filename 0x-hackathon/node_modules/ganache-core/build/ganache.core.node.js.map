{"version":3,"sources":["webpack://Ganache/webpack/universalModuleDefinition","webpack://Ganache/webpack/bootstrap","webpack://Ganache/./lib/utils/to.js","webpack://Ganache/external \"util\"","webpack://Ganache/external \"async\"","webpack://Ganache/external \"ethereumjs-util\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subprovider.js\"","webpack://Ganache/external \"lodash\"","webpack://Ganache/external \"source-map-support/register\"","webpack://Ganache/external \"ethereumjs-account\"","webpack://Ganache/./lib/utils/runtimeerror.js","webpack://Ganache/./lib/utils/transaction.js","webpack://Ganache/external \"ethereumjs-block\"","webpack://Ganache/./lib/utils/log.js","webpack://Ganache/./lib/utils/receipt.js","webpack://Ganache/./lib/utils/errorhelper.js","webpack://Ganache/external \"events\"","webpack://Ganache/./node_modules/web3/src/index.js","webpack://Ganache/./lib/provider.js","webpack://Ganache/./node_modules/ethereumjs-wallet/index.js","webpack://Ganache/./lib/blockchain_double.js","webpack://Ganache/external \"merkle-patricia-tree\"","webpack://Ganache/external \"level-sublevel\"","webpack://Ganache/./lib/database/txserializer.js","webpack://Ganache/./lib/utils/txrejectederror.js","webpack://Ganache/./lib/utils/block_helper.js","webpack://Ganache/./public-exports.js","webpack://Ganache/external \"web3-provider-engine\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subscriptions\"","webpack://Ganache/./lib/subproviders/requestfunnel.js","webpack://Ganache/./lib/subproviders/delayedblockfilter.js","webpack://Ganache/./lib/subproviders/gethdefaults.js","webpack://Ganache/./lib/subproviders/geth_api_double.js","webpack://Ganache/./lib/statemanager.js","webpack://Ganache/external \"ethereumjs-abi\"","webpack://Ganache/external \"ethereumjs-tx\"","webpack://Ganache/external \"ethereumjs-tx/fake\"","webpack://Ganache/external \"assert\"","webpack://Ganache/external \"rlp\"","webpack://Ganache/external \"seedrandom\"","webpack://Ganache/external \"bip39\"","webpack://Ganache/external \"safe-buffer\"","webpack://Ganache/external \"crypto\"","webpack://Ganache/external \"scrypt.js\"","webpack://Ganache/external \"uuid/v4\"","webpack://Ganache/external \"bs58check\"","webpack://Ganache/./node_modules/ethereumjs-wallet/hdkey.js","webpack://Ganache/external \"hdkey\"","webpack://Ganache/external \"ethereumjs-vm\"","webpack://Ganache/external \"heap\"","webpack://Ganache/./lib/database.js","webpack://Ganache/./lib/database/leveluparrayadapter.js","webpack://Ganache/./lib/database/levelupobjectadapter.js","webpack://Ganache/external \"levelup\"","webpack://Ganache/external \"encoding-down\"","webpack://Ganache/./lib/database/filedown.js","webpack://Ganache/external \"abstract-leveldown\"","webpack://Ganache/external \"fs\"","webpack://Ganache/external \"path\"","webpack://Ganache/external \"cachedown\"","webpack://Ganache/./lib/database/blockserializer.js","webpack://Ganache/./lib/database/bufferserializer.js","webpack://Ganache/./lib/database/blocklogsserializer.js","webpack://Ganache/./lib/database/receiptserializer.js","webpack://Ganache/external \"tmp\"","webpack://Ganache/./lib/utils/forkedblockchain.js","webpack://Ganache/./lib/utils/forkedstoragetrie.js","webpack://Ganache/external \"web3-core\"","webpack://Ganache/external \"web3-eth\"","webpack://Ganache/external \"web3-net\"","webpack://Ganache/external \"web3-eth-personal\"","webpack://Ganache/external \"web3-shh\"","webpack://Ganache/external \"web3-bzz\"","webpack://Ganache/external \"web3-utils\"","webpack://Ganache/external \"bn.js\"","webpack://Ganache/external \"eth-sig-util\"","webpack://Ganache/./lib/utils/random.js","webpack://Ganache/./lib/block_tracker.js","webpack://Ganache/./lib/server.js","webpack://Ganache/./lib/webSocketServer.js","webpack://Ganache/external \"websocket\"","webpack://Ganache/./lib/httpServer.js","webpack://Ganache/external \"http\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","buffer","val","data","Buffer","from","stripHexPrefix","isBuffer","hex","indexOf","trim","BN","intToHex","toString","addHexPrefix","_rpcQuantityHexString","this","replace","rpcQuantityHexString","rpcDataHexString","length","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","rpcError","id","code","msg","JSON","stringify","jsonrpc","error","message","require","inherits","to","abi","RuntimeError","transactions","vmOutput","Error","captureStackTrace","constructor","results","hashes","combine","err","keys","push","apply","tx","result","vm","exception","reason","hash","returnData","return","slice","rawDecode","exceptionError","program_counter","runState","programCounter","exceptionResult","count","fromResults","EthereumJsTransaction","EthereumJsFakeTransaction","ethUtil","assert","rlp","sign","fakeHash","_hash","arguments","BUFFER_ZERO","fixProps","forEach","fieldName","fieldLength","index","_fields","set","v","raw","configZeroableField","vDescriptors","getOwnPropertyDescriptor","sigV","chainId","Math","floor","_chainId","isFake","configurable","getSenderAddress","_from","Transaction","[object Object]","type","types","none","super","decode","self","isArray","field","initData","signed","fake","json","toAccount","buf","equals","setLengthLeft","input","options","nonce","gasLimit","gas","gasPrice","_type","expectedNonce","isSigned","block","transactionIndex","txns","blockHash","blockNumber","header","includeSignature","items","cacheRaw","rlphash","Log","toJSON","logIndex","transactionHash","address","topics","Receipt","logs","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","txHash","map","log","LevelUpOutOfRangeError","len","BlockOutOfRangeError","version","core","Eth","Net","Personal","Shh","Bzz","Web3","_this","packageInit","eth","shh","bzz","setProvider","provider","net","addProviders","ProviderEngine","SubscriptionSubprovider","RequestFunnel","DelayedBlockFilter","GethDefaults","GethApiDouble","BlockTracker","EventEmitter","_","Provider","_applyDefaultOptions","gethApiDouble","engine","blockTracker","blockchain","state","subscriptionSubprovider","manager","addProvider","setMaxListeners","start","sendAsync","send","close","_queueRequest","_processRequestQueue","on","notification","emit","defaultOptions","vmErrorsOnRPCResponse","verbose","asyncRequestProcessing","logger","merge","payload","callback","externalize","cloneDeep","intermediary","response","reportErrorInResponse","split","stopMining","stop","_requestQueue","setImmediate","_requestInProgress","args","shift","cleanUpErrorObject","errorObject","stack","transactionMethods","_isTransactionRequest","request","method","_typeof","iterator","obj","crypto","scryptsy","uuidv4","bs58check","decipherBuffer","decipher","concat","update","final","Wallet","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","privKey","generate","icapDirect","randomBytes","max","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getAddressString","getChecksumAddressString","toChecksumAddress","toV3","password","opts","derivedKey","salt","iv","kdf","kdfparams","dklen","prf","pbkdf2Sync","cipher","createCipheriv","ciphertext","mac","sha3","random","uuid","cipherparams","getV3Filename","timestamp","Date","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","fromPrivateKey","fromExtendedPrivateKey","tmp","fromV1","parse","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","seed","createDecipheriv","IV","fromV3","toLowerCase","fromEthSale","encseed","wallet","ethaddr","Account","Block","VM","Trie","async","Heap","Database","BlockchainDouble","console","trie","db_path","pending_transactions","blockGasLimit","defaultTransactionGasLimit","timeAdjustment","time","debug","hardfork","allowUnlimitedContractSize","assign","initialize","accounts","latestBlock","stateRoot","stateTrie","createStateTrie","trie_db","createVMFromStateTrie","setTime","createGenesisBlock","stateManager","checkpoint","eachSeries","accountData","finished","putAccount","account","commit","putBlock","getBlock","done","e","activatePrecompiles","info","opcode","argsNum","in","arg","db","createBlock","blocks","last","getEffectiveBlockNumber","getHeight","blockHashes","blockIndex","first","receipts","requests","blockLogs","transactionReceipts","parallel","popBlock","del","pop","series","newLastBlock","setStateRoot","_cache","clear","clearPendingTransactions","parent","getParent","parentNumber","currentTime","parentHash","getQueuedNonce","addressBuffer","pendingNonce","queueTransaction","sortByPriceAndNonce","sortedByNonce","arr","nonceSort","a","b","sort","heap","sortedTransactions","size","best","processCall","runCall","parentBlock","newBlock","runArgs","skipBalance","skipNonce","runTx","vmerr","processBlock","runBlock","skipBlockValidation","totalBlockGasUsage","receipt","txLogs","receiptLog","j","rcpt","toArrayLike","createdAddress","bloom","bitvector","cb","commmitIfNeeded","processNextBlock","undefined","currentTransactions","totalGasLimit","maxGasLimit","processTransactionTrace","params","targetHash","txHashCurrentlyProcessing","txCurrentlyProcessing","storageStack","currentDepth","returnVal","returnValue","structLogs","stepListener","event","next","gasLeft","gasUsedThisStep","memory","disableMemory","match","lastItem","disableStack","item","structLog","depth","gasCost","op","pc","storage","disableStorage","processStorageTrace","getTransactionReceipt","targetBlock","beforeTxListener","afterTxListener","removeListeners","removeListener","getContractStorage","getAccount","currentStateRoot","getNonce","getBalance","balance","getStorage","position","getCode","getTransaction","notFound","pendingTxs","getBlockLogs","effective","getTime","increaseTime","seconds","date","now","encode","fromJSON","TXRejectedError","includeFullTransactions","mixHash","sha3Uncles","uncleHash","transactionsRoot","transactionsTrie","receiptsRoot","receiptTrie","miner","coinbase","difficulty","totalDifficulty","extraData","toJsonRpc","uncles","Server","server","_webpacked","Subprovider","methods","eth_call","eth_getStorageAt","eth_sendTransaction","eth_sendRawTransaction","eth_newBlockFilter","eth_getFilterChanges","eth_getFilterLogs","queue","isWorking","handleRequest","end","external","processNext","watching","handleNewBlockFilter","handleGetFilterChanges","filterId","currentBlockHash","previousBlockHash","emitPayload","res","StateManager","blockHelper","pkg","initialized","initialization_error","post_initialization_callbacks","callbacks","waitForInitialization","addedBlockParam","requiresDefaultBlockParameter","minLength","errorMessage","getDelayedHandler","eth_getBalance","eth_getCode","eth_getTransactionCount","eth_estimateGas","eth_accounts","eth_blockNumber","eth_coinbase","eth_mining","is_mining","eth_hashrate","eth_gasPrice","eth_getBlockByNumber","eth_getBlockByHash","eth_getBlockTransactionCountByNumber","eth_getBlockTransactionCountByHash","eth_getTransactionReceipt","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","hashOrNumber","eth_getTransactionByBlockNumberAndIndex","getTransactionCount","eth_sign","dataToSign","eth_signTypedData","typedDataToSign","signTypedData","txData","rawTx","queueRawTransaction","queueStorage","latestFilterId","mine","eth_getLogs","filter","getLogs","eth_uninstallFilter","eth_protocolVersion","bzz_hive","bzz_info","shh_version","eth_getCompilers","eth_syncing","net_listening","net_peerCount","web3_clientVersion","web3_sha3","string","net_version","miner_start","threads","startMining","miner_stop","rpc_modules","rpc","web3","evm","personal","personal_listAccounts","personal_accounts","personal_newAccount","createAccount","account_passwords","personal_importRawKey","rawKey","secretKey","personal_lockAccount","unlocked_accounts","personal_unlockAccount","duration","storedPassword","personal_sendTransaction","ret","evm_snapshot","snapshot","evm_revert","snapshotId","revert","evm_increaseTime","evm_setTime","evm_mine","debug_traceTransaction","queueTransactionTrace","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","uncleIndex","eth_getWork","eth_submitWork","powHash","digest","eth_submitHashrate","hashRate","clientID","db_putString","dbName","db_getString","db_putHex","db_getHex","shh_post","priority","ttl","shh_newIdentity","shh_hasIdentity","shh_newGroup","shh_addToGroup","shh_newFilter","shh_uninstallFilter","shh_getFilterChanges","shh_getMessages","seedrandom","bip39","hdkey","ForkedBlockchain","sigUtil","ZERO_BUFFER","fork","secure","total_accounts","latest_filter_id","action_queue","action_processing","snapshots","network_id","mnemonic","fromMasterSeed","mnemonicToSeed","wallet_hdpath","hdPath","gasPriceVal","blockTime","is_mining_on_interval","mining_interval_timeout","_provider","default_balance_ether","randomAlphaNumericString","entropyToMnemonic","defaultBalanceWei","toWei","reduce","idx","forkVersion","mineOnInterval","_minerCancellationToken","clearTimeout","cancelled","cancellationToken","timeout","setTimeout","unref","derivePath","getWallet","publicKey","_queueTransaction","processNextAction","txJsonRpc","isKnownAccount","_setTransactionDefaults","allocUnsafe","override","queued","processTransaction","processGasEstimate","msgHash","hashPersonalMessage","sgn","ecsign","toRpcSig","EIP712Domain","domain","primaryType","printTransactionReceipt","runtimeError","finishedPrinting","processBlocks","totalBlocks","amountProcessed","whilst","createTransactionWithCorrectNonce","gasRefund","add","expectedAddress","expectedTopics","fromBlock","toBlock","current","filtered","keep","expectedTopic","logTopic","isMatch","includes","nextSnapshot","during","doneWithTest","nextBlock","hasContractCode","getContractCode","isUnlocked","validateNonce","Promise","resolve","expected","actual","reject","then","catch","HDKey","EthereumHDKey","fromHDKey","_hdkey","seedBuffer","fromExtendedKey","base58key","privateExtendedKey","publicExtendedKey","path","derive","deriveChild","_privateKey","_publicKey","LevelUpArrayAdapter","LevelUpObjectAdapter","levelup","filedown","cachedown","txserializer","blockserializer","bufferserializer","BlockLogsSerializer","ReceiptSerializer","directory","finishInitializing","dir","getDir","levelupOptions","valueEncoding","store","maxSize","Sublevel","serializer","sublevel","_get","_put","encoded","put","RangeError","newLength","valueserializer","keyserializer","encodedKey","decodedValue","batch","array","each","isOpen","util","AbstractLevelDOWN","fs","FileDown","location","_open","writeFile","readFile","_del","unlink","_batch","txJson","database","ForkedStorageTrie","forkBlockNumber","providers","HttpProvider","storageTrieCache","patchVM","getId","_lookupStorageTrie","lookupStorageTrie","_lookupAccount","createForkedStorageTrie","isFallbackBlock","isBlockHash","isFallbackBlockHash","getFallbackBlock","numberOrHash","toBN","transactionTrie","real","getRelativeBlockNumber","getBlockReference","blockReference","keyExists","exists","fetchCodeFromFallback","acc","fetchAccountFromFallback","receiptJson","fetchBalanceFromFallback","fetchNonceFromFallback","setCode","getSafeFallbackBlockNumber","safeBlockNumber","relative","currentProvider","_checkpointTrie","customCheckpoint","_revertTrie","checkpoints","customRevert","MerklePatriciaTree","findPath","node","remainder","serialize","getStorageAt","rng","alphabet","text","charAt","GanacheBlockTracker","_blockchain","getTrackingBlock","awaitCurrentBlock","_setCurrentBlock","_currentBlock","getCurrentBlock","once","_isRunning","oldBlock","webSocketServer","httpServer","keepAliveTimeout","connectionCounter","connections","conn","oldListen","listen","ws","oldClose","destroy","WebSocketServer","ConnectionManager","connectionsBySubscriptionId","_updateSubscriptions","manageConnection","_logPayload","_handleRequest","connectionManager","wsServer","autoAcceptConnections","connection","subscriptions","utf8Data","subscriptionId","subscription","http","sendResponse","statusCode","headers","writeHead","createServer","body","chunk","requestHeaders","origin","createCORSResponseHeaders","ganacheProvider"],"mappings":"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","file":"ganache.core.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Ganache\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ganache\"] = factory();\n\telse\n\t\troot[\"Ganache\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","let utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function(val) {\n    let data;\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = Buffer.from(utils.stripHexPrefix(val), \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  _rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcDataHex = this.rpcDataHexString(val, length);\n      return rpcDataHex === \"0x\" ? null : rpcDataHex;\n    }\n  },\n\n  nullableRpcQuantityHexString: function(val, length) {\n    if (val === null) {\n      return null;\n    } else {\n      const rpcQuantityHex = this._rpcQuantityHexString(val, length);\n      return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n    }\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  },\n\n  rpcError: function(id, code, msg) {\n    return JSON.stringify({\n      jsonrpc: \"2.0\",\n      id: id,\n      error: {\n        code: code,\n        message: msg\n      }\n    });\n  }\n};\n","module.exports = require(\"util\");","module.exports = require(\"async\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"web3-provider-engine/subproviders/subprovider.js\");","module.exports = require(\"lodash\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethereumjs-account\");","var inherits = require(\"util\").inherits;\nvar to = require(\"./to\");\nvar abi = require(\"ethereumjs-abi\");\n\ninherits(RuntimeError, Error);\n\n// Note: ethereumjs-vm will return an object that has a \"results\" and \"receipts\" keys.\n// You should pass in the whole object.\nfunction RuntimeError(transactions, vmOutput) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n\n  this.results = {};\n  this.hashes = [];\n\n  // handles creating this.message\n  this.combine(transactions, vmOutput);\n}\n\nRuntimeError.prototype.combine = function(transactions, vmOutput) {\n  // Can be combined with vmOutput or another RuntimeError.\n  if (transactions instanceof RuntimeError) {\n    var err = transactions;\n    var keys = Object.keys(err.results);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      this.results[key] = err.results[key];\n      Array.prototype.push.apply(this.hashes, err.hashes);\n    }\n  } else {\n    var results = vmOutput.results;\n\n    for (i = 0; i < transactions.length; i++) {\n      var tx = transactions[i];\n      var result = results[i];\n\n      // 1 means no error, oddly.\n      if (result.vm.exception !== 1) {\n        var hash = to.hex(tx.hash());\n        this.hashes.push(hash);\n        var reason;\n        var returnData = result.vm.return;\n        if (returnData && returnData.slice(0, 4).toString(\"hex\") === \"08c379a0\") {\n          reason = abi.rawDecode([\"string\"], returnData.slice(4))[0];\n        }\n\n        this.results[hash] = {\n          error: result.vm.exceptionError.error || result.vm.exceptionError,\n          program_counter: result.vm.runState.programCounter,\n          return: to.hex(result.vm.return),\n          reason: reason\n        };\n      }\n    }\n  }\n\n  // Once combined, set the message\n  if (this.hashes.length === 1) {\n    var exceptionResult = this.results[this.hashes[0]];\n    var message = \"VM Exception while processing transaction: \" + exceptionResult.error;\n    if (exceptionResult.reason) {\n      message += \" \" + exceptionResult.reason;\n    }\n    this.message = message;\n  } else {\n    message = \"Multiple VM Exceptions while processing transactions: \\n\\n\";\n\n    for (i = 0; i < this.hashes.length; i++) {\n      hash = this.hashes[i];\n      exceptionResult = this.results[hash];\n      message += hash + \": \" + exceptionResult.error;\n      if (exceptionResult.reason) {\n        message += \" \" + exceptionResult.reason;\n      }\n      message += \"\\n\";\n    }\n    this.message = message;\n  }\n};\n\nRuntimeError.prototype.count = function() {\n  return Object.keys(this.results).length;\n};\n\nRuntimeError.fromResults = function(transactions, vmOutput) {\n  var err = new RuntimeError(transactions, vmOutput);\n\n  if (err.count() === 0) {\n    return null;\n  }\n\n  return err;\n};\n\nmodule.exports = RuntimeError;\n","const EthereumJsTransaction = require(\"ethereumjs-tx\");\nconst EthereumJsFakeTransaction = require(\"ethereumjs-tx/fake\");\nconst ethUtil = require(\"ethereumjs-util\");\nconst assert = require(\"assert\");\nconst rlp = require(\"rlp\");\nconst to = require(\"./to\");\n\nconst sign = EthereumJsTransaction.prototype.sign;\nconst fakeHash = function() {\n  // this isn't memoization of the hash. previous versions of ganache-core\n  // created hashes in a different/incorrect way and are recorded this way\n  // in snapshot dbs. We are preserving the chain's immutability by using the\n  // stored hash instead of calculating it.\n  if (this._hash != null) {\n    return this._hash;\n  }\n  return EthereumJsFakeTransaction.prototype.hash.apply(this, arguments);\n};\nconst BUFFER_ZERO = Buffer.from([0]);\n\nfunction configZeroableField(tx, fieldName, fieldLength = 32) {\n  const index = tx._fields.indexOf(fieldName);\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, fieldName, {\n    set: (v) => {\n      v = ethUtil.toBuffer(v);\n      assert(fieldLength >= v.length, `The field ${fieldName} must not have more ${fieldLength} bytes`);\n      tx.raw[index] = v;\n    }\n  });\n}\n\n/**\n * etheruemjs-tx's Transactions don't behave quite like we need them to, so\n * we're monkey-patching them to do what we want here.\n * @param {Transaction} tx The Transaction to fix\n * @param {Object} [data] The data object\n */\nfunction fixProps(tx, data) {\n  // ethereumjs-tx doesn't allow for a `0` value in fields, but we want it to\n  // in order to differentiate between a value that isn't set and a value\n  // that is set to 0 in a fake transaction.\n  // Once https://github.com/ethereumjs/ethereumjs-tx/issues/112 is fixed we\n  // can probably remove this fix.\n  const fieldNames = [\"nonce\", \"gasPrice\", \"gasLimit\", \"value\"];\n  fieldNames.forEach((fieldName) => configZeroableField(tx, fieldName, 32));\n\n  // Ethereumjs-tx doesn't set the _chainId value whenever the v value is set,\n  // which causes transaction signing to fail on transactions that include a\n  // chain id in the v value (like ethers.js does).\n  // Whenever the v value changes we need to make sure the chainId is also set.\n  const vDescriptors = Object.getOwnPropertyDescriptor(tx, \"v\");\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, \"v\", {\n    set: (v) => {\n      vDescriptors.set.call(tx, v);\n      // calculate chainId from signature\n      const sigV = ethUtil.bufferToInt(tx.v);\n      let chainId = Math.floor((sigV - 35) / 2);\n      if (chainId < 0) {\n        chainId = 0;\n      }\n      tx._chainId = chainId || 0;\n    }\n  });\n\n  if (tx.isFake()) {\n    /**\n     * @prop {Buffer} from (read/write) Set from address to bypass transaction\n     * signing on fake transactions.\n     */\n    Object.defineProperty(tx, \"from\", {\n      enumerable: true,\n      configurable: true,\n      get: tx.getSenderAddress.bind(tx),\n      set: (val) => {\n        if (val) {\n          tx._from = ethUtil.toBuffer(val);\n        } else {\n          tx._from = null;\n        }\n      }\n    });\n\n    if (data && data.from) {\n      tx.from = data.from;\n    }\n\n    tx.hash = fakeHash;\n  }\n}\n\n/**\n * Parses the given data object and adds its properties to the given tx.\n * @param {Transaction} tx\n * @param {Object} [data]\n */\nfunction initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = Buffer.from(ethUtil.stripHexPrefix(data), \"hex\");\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      // Set chainId value from the data, if it's there and the data didn't\n      // contain a `v` value with chainId in it already. If we do have a\n      // data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}\n\nmodule.exports = class Transaction extends EthereumJsTransaction {\n  /**\n   * @param {Object} [data] The data for this Transaction.\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  constructor(data, type = Transaction.types.none) {\n    super();\n\n    this.type = type;\n\n    fixProps(this, data);\n    initData(this, data);\n  }\n\n  static get types() {\n    // values must be powers of 2\n    return {\n      none: 0,\n      signed: 1,\n      fake: 2\n    };\n  }\n\n  /**\n   * Prepares arbitrary JSON data for use in a Transaction.\n   * @param {Object} json JSON object representing the Transaction\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  static fromJSON(json, type) {\n    let toAccount;\n    if (json.to) {\n      // Remove all padding and make it easily comparible.\n      const buf = to.buffer(json.to);\n      if (buf.equals(Buffer.from([0]))) {\n        // if the address is 0x0 make it 0x0{20}\n        toAccount = ethUtil.setLengthLeft(buf, 20);\n      } else {\n        toAccount = buf;\n      }\n    }\n    const data = json.data || json.input;\n    const options = {\n      nonce: ethUtil.toBuffer(to.hex(json.nonce)),\n      from: ethUtil.toBuffer(to.hex(json.from)),\n      value: ethUtil.toBuffer(to.hex(json.value)),\n      gasLimit: ethUtil.toBuffer(to.hex(json.gas || json.gasLimit)),\n      gasPrice: ethUtil.toBuffer(to.hex(json.gasPrice)),\n      data: data ? Buffer.from(ethUtil.stripHexPrefix(data), \"hex\") : null,\n      to: toAccount,\n      v: ethUtil.toBuffer(json.v),\n      r: ethUtil.toBuffer(json.r),\n      s: ethUtil.toBuffer(json.s)\n    };\n\n    const tx = new Transaction(options, type);\n    tx._hash = json.hash ? Buffer.from(ethUtil.stripHexPrefix(json.hash), \"hex\") : null;\n    return tx;\n  }\n\n  /**\n   * Encodes the Transaction in order to be used in a database. Can be decoded\n   * into an identical Transaction via `Transaction.decode(encodedTx)`.\n   */\n  encode() {\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(this.hash()),\n      nonce: to.nullableRpcQuantityHexString(this.nonce) || \"0x\",\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.nullableRpcQuantityHexString(this.value),\n      gas: to.nullableRpcQuantityHexString(this.gasLimit),\n      gasPrice: to.nullableRpcQuantityHexString(this.gasPrice),\n      data: this.data ? this.data.toString(\"hex\") : null,\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcDataHexString(this.r),\n      s: to.nullableRpcDataHexString(this.s),\n      _type: this.type\n    };\n    return resultJSON;\n  }\n\n  isFake() {\n    return (this.type & Transaction.types.fake) === Transaction.types.fake;\n  }\n\n  isSigned() {\n    return (this.type & Transaction.types.signed) === Transaction.types.signed;\n  }\n\n  /**\n   * Compares the transaction's nonce value to the given expectedNonce taking in\n   * to account the type of transaction and comparison rules for each type.\n   *\n   * In a signed transaction a nonce of Buffer([]) is the same as Buffer([0]),\n   * but in a fake transaction Buffer([]) is null and Buffer([0]) is 0.\n   *\n   * @param {Buffer} expectedNonce The value of the from account's next nonce.\n   */\n  validateNonce(expectedNonce) {\n    let nonce;\n    if (this.isSigned() && this.nonce.length === 0) {\n      nonce = BUFFER_ZERO;\n    } else {\n      nonce = this.nonce;\n    }\n    return nonce.equals(expectedNonce);\n  }\n\n  /**\n   * Signs the transaction and sets the `type` bit for `signed` to 1,\n   * i.e., `isSigned() === true`\n   */\n  sign() {\n    sign.apply(this, arguments);\n    this.type |= Transaction.types.signed;\n  }\n\n  /**\n   * Returns a JSON-RPC spec compliant representation of this Transaction.\n   *\n   * @param {Object} block The block this Transaction appears in.\n   */\n  toJsonRpc(block) {\n    const hash = this.hash();\n\n    let transactionIndex = null;\n    for (let i = 0, txns = block.transactions, l = txns.length; i < l; i++) {\n      if (txns[i].hash().equals(hash)) {\n        transactionIndex = i;\n        break;\n      }\n    }\n\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(hash),\n      nonce: to.rpcQuantityHexString(this.nonce),\n      blockHash: to.nullableRpcDataHexString(block.hash()),\n      blockNumber: to.nullableRpcQuantityHexString(block.header.number),\n      transactionIndex: to.nullableRpcQuantityHexString(transactionIndex),\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.rpcQuantityHexString(this.value),\n      gas: to.rpcQuantityHexString(this.gasLimit),\n      gasPrice: to.rpcQuantityHexString(this.gasPrice),\n      input: to.rpcDataHexString(this.data),\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcDataHexString(this.r),\n      s: to.nullableRpcDataHexString(this.s)\n    };\n\n    return resultJSON;\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   *\n   * This method is nearly identical to ethereumjs-tx hash with the exception of\n   * the v,r,s value setting when _chainId > 0. Because the `_chainId` in our\n   * implementation is calculated whenever the v is updated we have to make sure\n   * we don't recalc the chainId when we set the v to soemthing else.\n   *\n   * Note: If the transaction is a fake transaction this hash method gets\n   * overridden in the constructor.\n   *\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n  hash(includeSignature = true) {\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    let items;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      // cache the chainId here\n      const chainId = this._chainId;\n      if (chainId > 0) {\n        const cacheRaw = this.raw.slice();\n        // Setting `this.v` changes the value of `this._chainId`\n        this.v = chainId;\n        this.r = 0;\n        this.s = 0;\n\n        items = this.raw;\n        this.raw = cacheRaw;\n        // set the chainId back to its original value here.\n        this._chainId = chainId;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  }\n};\n","module.exports = require(\"ethereumjs-block\");","var to = require(\"./to.js\");\n\n// Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function(key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function() {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\"\n  };\n};\n\nmodule.exports = Log;\n","var to = require(\"./to\");\n\nfunction Receipt(tx, block, logs, gasUsed, cumulativeGasUsed, contractAddress, status, logsBloom) {\n  this.tx = tx;\n  this.block = block;\n  this.logs = logs;\n  this.gasUsed = gasUsed;\n  this.cumulativeGasUsed = cumulativeGasUsed;\n  this.contractAddress = contractAddress;\n  this.status = status;\n  this.logsBloom = logsBloom;\n\n  this.transactionIndex = 0;\n\n  this.txHash = tx.hash();\n\n  for (var i = 0; i < block.transactions.length; i++) {\n    var current = block.transactions[i];\n    if (current.hash().equals(this.txHash)) {\n      this.transactionIndex = i;\n      break;\n    }\n  }\n}\n\nReceipt.prototype.toJSON = function() {\n  // Enforce Hex formatting as defined in the RPC spec.\n  return {\n    transactionHash: to.rpcDataHexString(this.txHash),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    from: to.rpcDataHexString(this.tx.from),\n    to: to.nullableRpcDataHexString(this.tx.to),\n    gasUsed: to.rpcQuantityHexString(this.gasUsed),\n    cumulativeGasUsed: to.rpcQuantityHexString(this.cumulativeGasUsed),\n    contractAddress: this.contractAddress != null ? to.rpcDataHexString(this.contractAddress) : null,\n    logs: this.logs.map(function(log) {\n      return log.toJSON();\n    }),\n    status: to.rpcQuantityHexString(this.status),\n    logsBloom: to.rpcDataHexString(this.logsBloom),\n    v: to.rpcDataHexString(this.tx.v),\n    r: to.rpcDataHexString(this.tx.r),\n    s: to.rpcDataHexString(this.tx.s)\n  };\n};\n\nmodule.exports = Receipt;\n","class LevelUpOutOfRangeError extends Error {\n  constructor(type, index, len) {\n    const message = \"LevelUpArrayAdapter named '\" + type + \"' index out of range: index \" + index + \"; length: \" + len;\n    super(message);\n    this.name = `${this.constructor.name}:${type}`;\n    this.type = type;\n  }\n}\n\nclass BlockOutOfRangeError extends LevelUpOutOfRangeError {\n  constructor(index, len) {\n    super(\"blocks\", index, len);\n  }\n}\n\nmodule.exports = {\n  LevelUpOutOfRangeError,\n  BlockOutOfRangeError\n};\n","module.exports = require(\"events\");","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar version = require('../package.json').version;\nvar core = require('web3-core');\nvar Eth = require('web3-eth');\nvar Net = require('web3-net');\nvar Personal = require('web3-eth-personal');\nvar Shh = require('web3-shh');\nvar Bzz = require('web3-bzz');\nvar utils = require('web3-utils');\n\nvar Web3 = function Web3() {\n    var _this = this;\n\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n\n    this.version = version;\n    this.utils = utils;\n\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function (provider, net) {\n        setProvider.apply(_this, arguments);\n\n        this.eth.setProvider(provider, net);\n        this.shh.setProvider(provider, net);\n        this.bzz.setProvider(provider);\n\n        return true;\n    };\n};\n\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\n\ncore.addProviders(Web3);\n\nmodule.exports = Web3;\n\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nlet ProviderEngine = require(\"web3-provider-engine\");\nlet SubscriptionSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nlet RequestFunnel = require(\"./subproviders/requestfunnel\");\nlet DelayedBlockFilter = require(\"./subproviders/delayedblockfilter\");\nlet GethDefaults = require(\"./subproviders/gethdefaults\");\nlet GethApiDouble = require(\"./subproviders/geth_api_double\");\n\nlet BlockTracker = require(\"./block_tracker\");\n\nlet RuntimeError = require(\"./utils/runtimeerror\");\nlet EventEmitter = require(\"events\");\n\nlet _ = require(\"lodash\");\n\nfunction Provider(options) {\n  const self = this;\n  EventEmitter.call(this);\n\n  this.options = options = self._applyDefaultOptions(options || {});\n\n  let gethApiDouble = new GethApiDouble(options, this);\n\n  this.engine = new ProviderEngine({\n    blockTracker: new BlockTracker({ blockchain: gethApiDouble.state.blockchain })\n  });\n\n  let subscriptionSubprovider = new SubscriptionSubprovider();\n\n  this.engine.manager = gethApiDouble;\n  this.engine.addProvider(new RequestFunnel());\n  this.engine.addProvider(new DelayedBlockFilter());\n  this.engine.addProvider(subscriptionSubprovider);\n  this.engine.addProvider(new GethDefaults());\n  this.engine.addProvider(gethApiDouble);\n\n  this.engine.setMaxListeners(100);\n  this.engine.start();\n\n  this.manager = gethApiDouble;\n  this.sendAsync = this.send.bind(this);\n  this.send = this.send.bind(this);\n  this.close = this.close.bind(this);\n  this._queueRequest = this._queueRequest.bind(this);\n  this._processRequestQueue = this._processRequestQueue.bind(this);\n\n  subscriptionSubprovider.on(\"data\", function(err, notification) {\n    self.emit(\"data\", err, notification);\n  });\n}\n\nconst defaultOptions = {\n  vmErrorsOnRPCResponse: true,\n  verbose: false,\n  asyncRequestProcessing: false,\n  logger: {\n    log: function() {}\n  }\n};\n\nProvider.prototype = Object.create(EventEmitter.prototype);\nProvider.prototype.constructor = Provider;\n\nProvider.prototype._applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n\nProvider.prototype.send = function(payload, callback) {\n  if (typeof callback !== \"function\") {\n    throw new Error(\n      \"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n        \"is no longer synchronous and must be passed a callback as its final argument.\"\n    );\n  }\n\n  let self = this;\n\n  let externalize = function(payload) {\n    return _.cloneDeep(payload);\n  };\n\n  if (Array.isArray(payload)) {\n    payload = payload.map(externalize);\n  } else {\n    payload = externalize(payload);\n  }\n\n  let intermediary = function(err, result) {\n    // clone result so that we can mutate the response without worrying about\n    // that messing up assumptions the calling logic might have about us\n    // mutating things\n    result = _.cloneDeep(result);\n    let response;\n    if (Array.isArray(result)) {\n      response = [];\n      for (let i = 0; i < result.length; i++) {\n        response.push(self.reportErrorInResponse(payload[i], err, result[i]));\n      }\n    } else {\n      response = self.reportErrorInResponse(payload, err, result);\n    }\n\n    if (self.options.verbose) {\n      self.options.logger.log(\n        \" <   \" +\n          JSON.stringify(response, null, 2)\n            .split(\"\\n\")\n            .join(\"\\n <   \")\n      );\n    }\n    callback(response.error ? err : null, response);\n  };\n\n  if (self.options.verbose) {\n    self.options.logger.log(\n      \"   > \" +\n        JSON.stringify(payload, null, 2)\n          .split(\"\\n\")\n          .join(\"\\n   > \")\n    );\n  }\n\n  if (self.options.asyncRequestProcessing) {\n    self.engine.sendAsync(payload, intermediary);\n  } else {\n    self._queueRequest(payload, intermediary);\n  }\n};\n\nProvider.prototype.close = function(callback) {\n  // This is a little gross reaching, but...\n  this.manager.state.stopMining();\n  this.manager.state.blockchain.close(callback);\n  this.engine.stop();\n};\n\nProvider.prototype._queueRequest = function(payload, intermediary) {\n  if (!this._requestQueue) {\n    this._requestQueue = [];\n  }\n\n  this._requestQueue.push({\n    payload: payload,\n    callback: intermediary\n  });\n\n  setImmediate(this._processRequestQueue);\n};\n\nProvider.prototype._processRequestQueue = function() {\n  const self = this;\n\n  if (self._requestInProgress) {\n    return;\n  }\n\n  self._requestInProgress = true;\n\n  let args = self._requestQueue.shift();\n\n  if (args) {\n    self.engine.sendAsync(args.payload, (err, result) => {\n      if (self._requestQueue.length > 0) {\n        setImmediate(self._processRequestQueue);\n      }\n      args.callback(err, result);\n      self._requestInProgress = false;\n    });\n  } else {\n    // still need to free the lock\n    self._requestInProgress = false;\n\n    if (self._requestQueue.length > 0) {\n      setImmediate(self._processRequestQueue);\n    }\n  }\n};\n\nProvider.prototype.cleanUpErrorObject = function(err, response) {\n  // Our response should already have an error field at this point, if it\n  // doesn't, this was likely intentional. If not, this is the wrong place to\n  // fix that problem.\n  if (!err || !response.error) {\n    return response;\n  }\n\n  let errorObject = {\n    error: {\n      data: {}\n    }\n  };\n\n  if (err.message) {\n    // clean up the error reporting done by the provider engine so the error message isn't lost in the stack trace noise\n    errorObject.error.message = err.message;\n    errorObject.error.data.stack = err.stack;\n    errorObject.error.data.name = err.name;\n  } else if (!response.error) {\n    errorObject.error = {\n      message: err.toString()\n    };\n  }\n\n  return _.merge(response, errorObject);\n};\n\n// helper list of RPC methods which execute code and respond with a transaction hash as their result\nlet transactionMethods = [\"eth_sendTransaction\", \"eth_sendRawTransaction\", \"personal_sendTransaction\"];\n\nProvider.prototype._isTransactionRequest = function(request) {\n  return transactionMethods.indexOf(request.method) !== -1;\n};\n\nProvider.prototype.reportErrorInResponse = function(request, err, response) {\n  const self = this;\n\n  if (!err) {\n    return response;\n  }\n\n  // TODO: for next major release: move reporting of tx hash on error to error\n  // field to prevent poorly-written clients which assume that the existence of\n  // the \"result\" field implies no errors from breaking.\n  if (self._isTransactionRequest(request)) {\n    if (err instanceof RuntimeError) {\n      // Make sure we always return the transaction hash on failed transactions so\n      // the caller can get their tx receipt. This breaks JSONRPC 2.0, but it's how\n      // we've always done it.\n      response.result = err.hashes[0];\n\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        delete response.error;\n      }\n    }\n  }\n\n  if (request.method === \"eth_call\") {\n    if (err instanceof RuntimeError) {\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        response.result = err.results[err.hashes[0]].return || \"0x\";\n        delete response.error;\n      }\n    }\n  }\n\n  return self.cleanUpErrorObject(err, response);\n};\n\nmodule.exports = Provider;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar scryptsy = require('scrypt.js');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction decipherBuffer(decipher, data) {\n  return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = crypto.randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(crypto.randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = crypto.randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || crypto.randomBytes(32);\n  var iv = opts.iv || crypto.randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || crypto.randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.sha3(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext, 'hex');\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = decipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.sha3(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","var to = require(\"./utils/to.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./utils/log\");\nvar Receipt = require(\"./utils/receipt\");\nvar VM = require(\"ethereumjs-vm\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Trie = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar async = require(\"async\");\nvar Heap = require(\"heap\");\nvar Database = require(\"./database\");\nvar EventEmitter = require(\"events\");\nvar _ = require(\"lodash\");\n\nfunction BlockchainDouble(options) {\n  var self = this;\n  EventEmitter.apply(self);\n\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  this.logger = options.logger || console;\n\n  this.data = new Database(options);\n\n  if (options.trie != null && options.db_path != null) {\n    throw new Error(\"Can't initialize a TestRPC with a db and a custom trie.\");\n  }\n\n  this.pending_transactions = [];\n\n  // updated periodically to keep up with the times\n  this.blockGasLimit = options.gasLimit;\n  this.defaultTransactionGasLimit = options.defaultTransactionGasLimit;\n  this.timeAdjustment = 0;\n}\n\nconst defaultOptions = {\n  gasLimit: \"0x6691b7\",\n  defaultTransactionGasLimit: \"0x15f90\",\n  time: null,\n  debug: false,\n  hardfork: \"constantinople\",\n  allowUnlimitedContractSize: false\n};\n\n// inheritence w/ prototype chaining\nBlockchainDouble.prototype = Object.create(EventEmitter.prototype);\nBlockchainDouble.prototype.constructor = BlockchainDouble;\n\nBlockchainDouble.prototype._applyDefaultOptions = function(options) {\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nBlockchainDouble.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.data.initialize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      var options = self.options;\n\n      var root = null;\n\n      if (block) {\n        root = block.header.stateRoot;\n      }\n\n      // I haven't yet found a good way to do this. Getting the trie from the\n      // forked blockchain without going through the other setup is a little gross.\n      self.stateTrie = self.createStateTrie(self.data.trie_db, root);\n\n      self.vm = options.vm || self.createVMFromStateTrie(self.stateTrie);\n\n      if (options.time) {\n        self.setTime(options.time);\n      }\n\n      // If we already have a block, then that means there's an existing chain.\n      // Don't create a genesis block.\n      if (block) {\n        self.emit(\"block\", block);\n        return callback();\n      }\n\n      self.createGenesisBlock(function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        accounts = accounts || [];\n\n        self.vm.stateManager.checkpoint(() => {\n          async.eachSeries(\n            accounts,\n            function(accountData, finished) {\n              self.vm.stateManager.putAccount(utils.toBuffer(accountData.address), accountData.account, finished);\n            },\n            function(err) {\n              if (err) {\n                return callback(err);\n              }\n\n              self.vm.stateManager.commit(() => {\n                // Create first block\n                self.putBlock(block, [], [], callback);\n              });\n            }\n          );\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.createVMFromStateTrie = function(state) {\n  const self = this;\n  const vm = new VM({\n    state: state,\n    blockchain: {\n      // EthereumJS VM needs a blockchain object in order to get block information.\n      // When calling getBlock() it will pass a number that's of a Buffer type.\n      // Unfortunately, it uses a 64-character buffer (when converted to hex) to\n      // represent block numbers as well as block hashes. Since it's very unlikely\n      // any block number will get higher than the maximum safe Javascript integer,\n      // we can convert this buffer to a number ahead of time before calling our\n      // own getBlock(). If the conversion succeeds, we have a block number.\n      // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)\n      getBlock: function(number, done) {\n        try {\n          number = to.number(number);\n        } catch (e) {\n          // Do nothing; must be a block hash.\n        }\n\n        self.getBlock(number, done);\n      }\n    },\n    activatePrecompiles: true,\n    hardfork: self.options.hardfork,\n    allowUnlimitedContractSize: self.options.allowUnlimitedContractSize\n  });\n\n  if (self.options.debug === true) {\n    // log executed opcodes, including args as hex\n    vm.on(\"step\", function(info) {\n      var name = info.opcode.name;\n      var argsNum = info.opcode.in;\n      if (argsNum) {\n        var args = info.stack\n          .slice(-argsNum)\n          .map((arg) => to.hex(arg))\n          .join(\" \");\n\n        self.logger.log(`${name} ${args}`);\n      } else {\n        self.logger.log(name);\n      }\n    });\n  }\n\n  return vm;\n};\n\nBlockchainDouble.prototype.createStateTrie = function(db, root) {\n  return new Trie(db, root);\n};\n\n// Overrideable so other implementations (forking) can edit it.\nBlockchainDouble.prototype.createGenesisBlock = function(callback) {\n  this.createBlock(callback);\n};\n\nBlockchainDouble.prototype.latestBlock = function(callback) {\n  this.data.blocks.last(function(err, last) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, last);\n  });\n};\n\n// number accepts number (integer, hex) or tag (e.g., \"latest\")\nBlockchainDouble.prototype.getEffectiveBlockNumber = function(number, callback) {\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number\n  if (number.indexOf(\"0x\") >= 0) {\n    return callback(null, to.number(number));\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.getHeight(callback);\n    } else if (number === \"earliest\") {\n      return callback(null, 0);\n    }\n  }\n};\n\n// number accepts number (integer, hex), tag (e.g., \"latest\") or block hash\n// This function is used by ethereumjs-vm\nBlockchainDouble.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number or a block hash\n  if (number.indexOf(\"0x\") >= 0) {\n    var hash = number;\n\n    // block hash\n    if (hash.length > 40) {\n      this.data.blockHashes.get(to.hex(hash), function(err, blockIndex) {\n        if (err) {\n          return callback(err);\n        }\n        return self.data.blocks.get(blockIndex, callback);\n      });\n    } else {\n      // Block number\n      return this.data.blocks.get(to.number(hash), callback);\n    }\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.latestBlock(callback);\n    } else if (number === \"earliest\") {\n      return this.data.blocks.first(callback);\n    }\n  }\n};\n\nBlockchainDouble.prototype.putBlock = function(block, logs, receipts, callback) {\n  var self = this;\n\n  // Lock in the state root for this block.\n  block.header.stateRoot = this.stateTrie.root;\n\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var requests = [\n      self.data.blocks.push.bind(self.data.blocks, block),\n      self.data.blockLogs.push.bind(self.data.blockLogs, logs),\n      self.data.blockHashes.set.bind(self.data.blockHashes, to.hex(block.hash()), length)\n    ];\n\n    block.transactions.forEach(function(tx, index) {\n      var txHash = to.hex(tx.hash());\n      requests.push(\n        self.data.transactions.set.bind(self.data.transactions, txHash, tx),\n        self.data.transactionReceipts.set.bind(self.data.transactionReceipts, txHash, receipts[index])\n      );\n    });\n\n    async.parallel(requests, (err, result) => {\n      if (!err) {\n        self.emit(\"block\", block);\n      }\n      callback(err, result);\n    });\n  });\n};\n\nBlockchainDouble.prototype.popBlock = function(callback) {\n  var self = this;\n\n  this.data.blocks.last(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    if (block == null) {\n      return callback(null, null);\n    }\n\n    var requests = [];\n    var blockHash = to.hex(block.hash());\n\n    block.transactions.forEach(function(tx) {\n      var txHash = to.hex(tx.hash());\n\n      requests.push(\n        self.data.transactions.del.bind(self.data.transactions, txHash),\n        self.data.transactionReceipts.del.bind(self.data.transactionReceipts, txHash)\n      );\n    });\n\n    requests.push(\n      self.data.blockLogs.pop.bind(self.data.blockLogs),\n      self.data.blockHashes.del.bind(self.data.blockHashes, blockHash),\n      self.data.blocks.pop.bind(self.data.blocks) // Do this one last in case anything relies on it.\n    );\n\n    async.series(requests, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Set the root to the last available, which will \"roll back\" to the previous\n      // moment in time. Note that all the old data is still in the db, but it's now just junk data.\n      self.data.blocks.last(function(err, newLastBlock) {\n        if (err) {\n          return callback(err);\n        }\n        // using setStateRoot because in the future it will automatically take care\n        // of clearing the cache for us.\n        // note setStateRoot checks for checkpoints, and if there are any, it will fail.\n        // At time of writing this comment, the only time there could be a checkpoint\n        // is in the middle of a vm.runBlock call. Once asyncRequestProcessing is reenabled\n        // this will likely cause problems.\n        self.vm.stateManager.setStateRoot(newLastBlock.header.stateRoot, function(err) {\n          // remove this `._cache.clear()` call once https://github.com/ethereumjs/ethereumjs-vm/pull/420\n          // is in a release, probably in ejs-vm 2.5.2\n          if (!err) {\n            self.vm.stateManager._cache.clear();\n          }\n          // Remember: Return block we popped off.\n          callback(err, block);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.clearPendingTransactions = function() {\n  this.pending_transactions = [];\n};\n\n/**\n * createBlock\n *\n * Create a new block, where the parent's block is either the latest block\n * on the chain or the parent block passed in.\n *\n * @param  {Block}   parent   The block meant to be the parent block (optional)\n * @param  {Function} callback Callback function called after block is created\n * @return Block              The block created.\n */\nBlockchainDouble.prototype.createBlock = function(parent, callback) {\n  var self = this;\n\n  if (typeof parent === \"function\") {\n    callback = parent;\n    parent = null;\n  }\n\n  var block = new Block();\n\n  function getParent(callback) {\n    if (parent) {\n      return callback(null, parent);\n    } else {\n      self.latestBlock(callback);\n    }\n  }\n\n  getParent(function(err, parent) {\n    if (err) {\n      return callback(err);\n    }\n\n    var parentNumber = parent != null ? to.number(parent.header.number) : -1;\n\n    block.header.gasLimit = self.blockGasLimit;\n\n    // Ensure we have the right block number for the VM.\n    block.header.number = to.hex(parentNumber + 1);\n\n    // Set the timestamp before processing txs\n    block.header.timestamp = to.hex(self.currentTime());\n\n    if (parent != null) {\n      block.header.parentHash = to.hex(parent.hash());\n    }\n\n    callback(null, block);\n  });\n};\n\nBlockchainDouble.prototype.getQueuedNonce = function(address, callback) {\n  var nonce = null;\n  var addressBuffer = to.buffer(address);\n  this.pending_transactions.forEach(function(tx) {\n    if (!tx.from.equals(addressBuffer)) {\n      return;\n    }\n\n    var pendingNonce = to.number(tx.nonce) || 0;\n    // If this is the first queued nonce for this address we found,\n    // or it's higher than the previous highest, note it.\n    if (nonce === null || pendingNonce > nonce) {\n      nonce = pendingNonce;\n    }\n  });\n\n  // If we found a queued transaction nonce, return one higher\n  // than the highest we found\n  if (nonce != null) {\n    return callback(null, Buffer.from([nonce + 1]));\n  }\n  this.stateTrie.get(addressBuffer, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n\n    var account = new Account(val);\n    // nonces are initiallized as an empty buffer, which isn't what we want.\n    callback(null, account.nonce.length === 0 ? Buffer.from([0]) : account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.queueTransaction = function(tx) {\n  this.pending_transactions.push(tx);\n};\n\nBlockchainDouble.prototype.sortByPriceAndNonce = function() {\n  // Sorts transactions like I believe geth does.\n  // See the description of 'SortByPriceAndNonce' at\n  // https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/types/transaction.go\n  var self = this;\n  var sortedByNonce = {};\n\n  self.pending_transactions.forEach((tx) => {\n    const from = tx.from.toString(\"hex\");\n    const arr = sortedByNonce[from];\n    if (arr) {\n      arr.push(tx);\n    } else {\n      sortedByNonce[from] = [tx];\n    }\n  });\n\n  var priceSort = function(a, b) {\n    return parseInt(to.hex(b.gasPrice), 16) - parseInt(to.hex(a.gasPrice), 16);\n  };\n  var nonceSort = function(a, b) {\n    return parseInt(to.hex(a.nonce), 16) - parseInt(to.hex(b.nonce), 16);\n  };\n\n  // Now sort each address by nonce\n  Object.keys(sortedByNonce).forEach((address) => {\n    sortedByNonce[address].sort(nonceSort);\n  });\n\n  // Initialise a heap, sorted by price, for the head transaction from each account.\n  var heap = new Heap(priceSort);\n  Object.keys(sortedByNonce).forEach((address) => {\n    heap.push(sortedByNonce[address].shift());\n  });\n\n  // Now reorder our transactions. Compare the next transactions from each account, and choose\n  // the one with the highest gas price.\n  const sortedTransactions = [];\n  while (heap.size() > 0) {\n    const best = heap.pop();\n    let address = best.from.toString(\"hex\");\n    if (sortedByNonce[address].length > 0) {\n      // Push on the next transaction from this account\n      heap.push(sortedByNonce[address].shift());\n    }\n    sortedTransactions.push(best);\n  }\n  self.pending_transactions = sortedTransactions;\n};\n\nBlockchainDouble.prototype.processCall = function(tx, blockNumber, callback) {\n  var self = this;\n\n  var runCall = function(tx, err, parentBlock) {\n    if (err) {\n      return callback(err);\n    }\n\n    // create a fake block with this fake transaction\n    self.createBlock(parentBlock, function(err, newBlock) {\n      if (err) {\n        return callback(err);\n      }\n      newBlock.transactions.push(tx);\n\n      var runArgs = {\n        tx: tx,\n        block: newBlock,\n        skipBalance: true,\n        skipNonce: true\n      };\n\n      var stateTrie = self.createStateTrie(self.data.trie_db, parentBlock.header.stateRoot);\n      var vm = self.createVMFromStateTrie(stateTrie);\n\n      vm.runTx(runArgs, function(vmerr, result) {\n        // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n        if (vmerr && vmerr instanceof Error === false) {\n          vmerr = new Error(\"VM error: \" + vmerr);\n        }\n\n        // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n        if (vmerr) {\n          return callback(vmerr, err);\n        }\n\n        // If no error, check for a runtime error. This can return null if no runtime error.\n        vmerr = RuntimeError.fromResults([tx], { results: [result] });\n\n        callback(vmerr, result);\n      });\n    });\n  };\n\n  // Delegate block selection\n  if (blockNumber === \"latest\") {\n    self.latestBlock(runCall.bind(null, tx));\n  } else {\n    self.getBlock(blockNumber, runCall.bind(null, tx));\n  }\n};\n\n/**\n * processBlock\n *\n * Process the passed in block and included transactions\n *\n * @param  {VM} vm             the vm to use when running the block\n * @param  {Block} block       block to process\n * @param  {Boolean} commit    Whether or not changes should be committed to the state\n * trie and the block appended to the end of the chain.\n * @param  {Function} callback Callback function when transaction processing is completed.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processBlock = function(vm, block, commit, callback) {\n  var self = this;\n\n  if (typeof commit === \"function\") {\n    callback = commit;\n    commit = true;\n  }\n\n  vm.runBlock(\n    {\n      block: block,\n      generate: true,\n      skipBlockValidation: true\n    },\n    function(vmerr, results) {\n      // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n      if (vmerr && vmerr instanceof Error === false) {\n        vmerr = new Error(\"VM error: \" + vmerr);\n      }\n\n      // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n      if (vmerr) {\n        callback(vmerr);\n        return;\n      }\n\n      // If no error, check for a runtime error. This can return null if no runtime error.\n      vmerr = RuntimeError.fromResults(block.transactions, results);\n\n      // Note, even if we have an error, some transactions may still have succeeded.\n      // Process their logs if so, returning the error at the end.\n\n      var logs = [];\n      var receipts = [];\n\n      var totalBlockGasUsage = 0;\n\n      results.results.forEach(function(result) {\n        totalBlockGasUsage += to.number(result.gasUsed);\n      });\n\n      block.header.gasUsed = utils.toBuffer(to.hex(totalBlockGasUsage));\n\n      for (var v = 0; v < results.receipts.length; v++) {\n        var result = results.results[v];\n        var receipt = results.receipts[v];\n        var tx = block.transactions[v];\n        var txHash = tx.hash();\n        var txLogs = [];\n\n        // Only process the transaction's logs if it didn't error.\n        if (result.vm.exception === 1) {\n          for (var i = 0; i < receipt.logs.length; i++) {\n            var receiptLog = receipt.logs[i];\n            var address = to.hex(receiptLog[0]);\n            var topics = [];\n\n            for (var j = 0; j < receiptLog[1].length; j++) {\n              topics.push(to.hex(receiptLog[1][j]));\n            }\n\n            var data = to.hex(receiptLog[2]);\n\n            var log = new Log({\n              logIndex: to.hex(i),\n              transactionIndex: to.hex(v),\n              transactionHash: txHash,\n              block: block,\n              address: address,\n              data: data,\n              topics: topics,\n              type: \"mined\"\n            });\n\n            logs.push(log);\n            txLogs.push(log);\n          }\n        }\n\n        let rcpt = new Receipt(\n          tx,\n          block,\n          txLogs,\n          result.gasUsed.toArrayLike(Buffer),\n          receipt.gasUsed,\n          result.createdAddress,\n          receipt.status,\n          to.hex(result.bloom.bitvector)\n        );\n        receipts.push(rcpt);\n      }\n\n      function commmitIfNeeded(cb) {\n        if (commit === true) {\n          // Put that block on the end of the chain\n          self.putBlock(block, logs, receipts, cb);\n        } else {\n          cb();\n        }\n      }\n\n      commmitIfNeeded(function(e) {\n        if (e) {\n          return callback(e);\n        }\n        // Note we return the vm err here too, if it exists.\n        callback(vmerr, block.transactions, results);\n      });\n    }\n  );\n};\n\n/**\n * processNextBlock\n *\n * Process the next block like a normal blockchain, pulling from the list of\n * pending transactions.\n *\n * @param  {number} timestamp at which the block is mined\n * @param  {Function} callback Callback when transaction processing is finished.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processNextBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n\n  self.sortByPriceAndNonce();\n\n  // Grab only the transactions that can fit within the block\n  var currentTransactions = [];\n  var totalGasLimit = 0;\n  var maxGasLimit = to.number(self.blockGasLimit);\n\n  while (self.pending_transactions.length > 0) {\n    var tx = self.pending_transactions[0];\n    var gasLimit = to.number(tx.gasLimit);\n\n    if (totalGasLimit + gasLimit <= maxGasLimit) {\n      totalGasLimit += gasLimit;\n      self.pending_transactions.shift();\n      currentTransactions.push(tx);\n    } else {\n      // Next one won't fit. Break.\n      break;\n    }\n  }\n\n  // Remember, we ensured transactions had a valid gas limit when they were queued (in the state manager).\n  // If we run into a case where we can't process any because one is higher than the gas limit,\n  // then it's a serious issue. This should never happen, but let's check anyway.\n  if (currentTransactions.length === 0 && self.pending_transactions.length > 0) {\n    // Error like geth.\n    var error = \"Unexpected error condition: next transaction exceeds block gas limit\";\n    return callback(error);\n  }\n\n  // Create a new block meant to be the end of the chain\n  this.createBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // Overwrite block timestamp\n    if (timestamp) {\n      self.data.blocks.last(function(err, last) {\n        if (err) {\n          return callback(err);\n        }\n        if (last && to.number(last.header.timestamp) > timestamp) {\n          self.logger.log(\n            \"Waring: Setting the block timestamp (\" + timestamp + \") that is earlier than the parent block one.\"\n          );\n        }\n      });\n      block.header.timestamp = to.hex(timestamp);\n      self.setTime(new Date(timestamp * 1000));\n    }\n    // Add transactions to the block.\n    Array.prototype.push.apply(block.transactions, currentTransactions);\n\n    self.processBlock(self.vm, block, true, callback);\n  });\n};\n\n/**\n * processTransactionTrace\n *\n * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n * This will return the vm-level trace output for debugging purposes.\n *\n * Strategy:\n *\n *  1. Find block where transaction occurred\n *  2. Set state root of that block\n *  3. Rerun every transaction in that block prior to and including the requested transaction\n *  4. Send trace results back.\n *\n * @param  {[type]}   tx       [description]\n * @param  {Function} callback [description]\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processTransactionTrace = function(hash, params, callback) {\n  var self = this;\n  var targetHash = to.hex(hash);\n  var txHashCurrentlyProcessing = \"\";\n  var txCurrentlyProcessing = null;\n\n  var storageStack = {\n    currentDepth: -1,\n    stack: []\n  };\n\n  var returnVal = {\n    gas: 0,\n    returnValue: \"\",\n    structLogs: []\n  };\n\n  function stepListener(event, next) {\n    // See these docs:\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n\n    var gasLeft = to.number(event.gasLeft);\n    var totalGasUsedAfterThisStep = to.number(txCurrentlyProcessing.gasLimit) - gasLeft;\n    var gasUsedThisStep = totalGasUsedAfterThisStep - returnVal.gas;\n    returnVal.gas += gasUsedThisStep;\n\n    var isMemoryEnabled = !params.disableMemory;\n    var memory = null;\n    if (isMemoryEnabled) {\n      // Get memory and break it up into 32-byte words.\n      // Note we may possibly have to pad the final word.\n      memory = Buffer.from(event.memory).toString(\"hex\");\n      memory = memory.match(/.{1,64}/g) || [];\n\n      if (memory.length > 0) {\n        var lastItem = memory[memory.length - 1];\n        if (lastItem.length < 64) {\n          memory[memory.length - 1] = lastItem + new Array(64 - lastItem.length + 1).join(\"0\");\n        }\n      }\n    }\n\n    var stack;\n    if (params.disableStack) {\n      stack = null;\n    } else {\n      stack = event.stack.map((item) => {\n        return to.rpcDataHexString(item, 64).replace(\"0x\", \"\"); // non-0x prefixed.\n      });\n    }\n\n    var structLog = {\n      depth: event.depth,\n      error: \"\",\n      gas: gasLeft,\n      gasCost: gasUsedThisStep,\n      memory,\n      op: event.opcode.name,\n      pc: event.pc,\n      stack,\n      storage: null\n    };\n\n    if (params.disableStorage) {\n      returnVal.structLogs.push(structLog);\n      next();\n    } else {\n      structLog = self.processStorageTrace(structLog, storageStack, event, function(err, structLog) {\n        if (err) {\n          return next(err);\n        }\n        returnVal.structLogs.push(structLog);\n        next();\n      });\n    }\n  }\n\n  // #1 - get block via transaction receipt\n  this.getTransactionReceipt(targetHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!receipt) {\n      return callback(new Error(\"Unknown transaction \" + targetHash));\n    }\n\n    var targetBlock = receipt.block;\n\n    // Get the parent of the target block\n    self.getBlock(targetBlock.header.parentHash, function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      // #2 - Set state root of original block\n      var stateTrie = self.createStateTrie(self.data.trie_db, parent.header.stateRoot);\n      var vm = self.createVMFromStateTrie(stateTrie);\n\n      // Prepare the \"next\" block with necessary transactions\n      self.createBlock(parent, function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        for (var i = 0; i < targetBlock.transactions.length; i++) {\n          var tx = targetBlock.transactions[i];\n          block.transactions.push(tx);\n\n          // After including the target transaction, that's all we need to do.\n          if (to.hex(tx.hash()) === targetHash) {\n            break;\n          }\n        }\n\n        function beforeTxListener(tx) {\n          txCurrentlyProcessing = tx;\n          txHashCurrentlyProcessing = to.hex(tx.hash());\n          if (txHashCurrentlyProcessing === targetHash) {\n            vm.on(\"step\", stepListener);\n          }\n        }\n\n        // afterTxListener cleans up everything.\n        function afterTxListener() {\n          if (txHashCurrentlyProcessing === targetHash) {\n            removeListeners();\n          }\n        }\n\n        function removeListeners() {\n          vm.removeListener(\"step\", stepListener);\n          vm.removeListener(\"beforeTx\", beforeTxListener);\n          vm.removeListener(\"afterTx\", afterTxListener);\n        }\n\n        // Listen to beforeTx and afterTx so we know when our target transaction\n        // is processing. These events will add the event listener for getting the trace data.\n        vm.on(\"beforeTx\", beforeTxListener);\n        vm.on(\"afterTx\", afterTxListener);\n\n        // #3 - Process the block without committing the data.\n        self.processBlock(vm, block, false, function(err) {\n          // Ignore runtime errors, or else erroneous transactions can't be traced.\n          if (err && err.message.indexOf(\"VM Exception\") === 0) {\n            err = null;\n          }\n\n          // Just to be safe\n          removeListeners();\n\n          // #4 - send state results back\n          callback(err, returnVal);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.processStorageTrace = function(structLog, storageStack, event, callback) {\n  var self = this;\n  var name = event.opcode.name;\n\n  var argsNum = event.opcode.in;\n  var args = event.stack.slice(-argsNum).map((arg) => to.hex(arg));\n\n  if (storageStack.currentDepth > event.depth) {\n    storageStack.stack.pop();\n  }\n  if (storageStack.currentDepth < event.depth) {\n    storageStack.stack.push({});\n  }\n\n  storageStack.currentDepth = event.depth;\n\n  var key;\n  var value;\n  switch (name) {\n    case \"SSTORE\":\n      key = to.rpcDataHexString(args[1], 64).replace(\"0x\", \"\");\n      value = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n\n      callback(null, structLog);\n      // assign after callback because this storage change actually takes\n      // effect _after_ this opcode executes\n      storageStack.stack[storageStack.currentDepth][key] = value;\n      break;\n    case \"SLOAD\":\n      // this one's more fun, we need to get the value the contract is loading from current storage\n      key = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n\n      self.vm.stateManager.getContractStorage(event.address, \"0x\" + key, function(err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        value = to.rpcDataHexString(result, 64).replace(\"0x\", \"\");\n        storageStack.stack[storageStack.currentDepth][key] = value;\n        // use Object.assign to prevent future steps from overwriting this step's storage values\n        structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n        callback(null, structLog);\n      });\n      break;\n    default:\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n      callback(null, structLog);\n  }\n};\n\nBlockchainDouble.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      // Finally, put the stateRoot back for good\n      trie.root = currentStateRoot;\n\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      callback(null, account);\n    });\n  });\n};\n\nBlockchainDouble.prototype.getNonce = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.getBalance = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, account.balance);\n  });\n};\n\n// Note! Storage values are returned RLP encoded!\nBlockchainDouble.prototype.getStorage = function(address, position, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      trie.root = account.stateRoot;\n\n      trie.get(utils.setLengthLeft(utils.toBuffer(position), 32), function(err, value) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err != null) {\n          return callback(err);\n        }\n\n        callback(null, value);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.getCode(trie, function(err, code) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, code);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getTransaction = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.data.transactions.get(hash, function(err, tx) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, tx);\n  });\n};\n\nBlockchainDouble.prototype.getTransactionReceipt = function(hash, callback) {\n  hash = to.hex(hash);\n  const pendingTxs = this.pending_transactions;\n\n  for (var i = 0; i < pendingTxs.length; i++) {\n    let pendingTxHash = to.hex(pendingTxs[i].hash());\n    if (hash === pendingTxHash) {\n      return callback(null, { tx: pendingTxs[i] });\n    }\n  }\n\n  this.data.transactionReceipts.get(hash, function(err, receipt) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(err, receipt);\n  });\n};\n\nBlockchainDouble.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    self.data.blockLogs.get(effective, callback);\n  });\n};\n\nBlockchainDouble.prototype.getHeight = function(callback) {\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, length - 1);\n  });\n};\n\nBlockchainDouble.prototype.currentTime = function() {\n  return ((new Date().getTime() / 1000) | 0) + this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.increaseTime = function(seconds) {\n  if (seconds < 0) {\n    seconds = 0;\n  }\n  this.timeAdjustment += seconds;\n  return this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.setTime = function(date) {\n  var now = (new Date().getTime() / 1000) | 0;\n  var start = (date.getTime() / 1000) | 0;\n  this.timeAdjustment = start - now;\n};\n\nBlockchainDouble.prototype.close = function(callback) {\n  this.data.close(callback);\n};\n\nmodule.exports = BlockchainDouble;\n","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"level-sublevel\");","// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\n\nconst decode = function(json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n\n  // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type);\n\n  // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function(tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n","var inherits = require(\"util\").inherits;\n\n// raised when the transaction is rejected prior to running it in the EVM.\nfunction TXRejectedError(message) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n}\n\ninherits(TXRejectedError, Error);\n\nmodule.exports = TXRejectedError;\n","var to = require(\"./to\");\n\nmodule.exports = {\n  toJSON: function(block, includeFullTransactions) {\n    return {\n      number: to.rpcQuantityHexString(block.header.number),\n      hash: to.hex(block.hash()),\n      parentHash: to.hex(block.header.parentHash), // common.hash\n      mixHash: to.hex(block.header.mixHash),\n      nonce: to.rpcDataHexString(to.hex(block.header.nonce), 16),\n      sha3Uncles: to.hex(block.header.uncleHash),\n      logsBloom: to.hex(block.header.bloom),\n      transactionsRoot: to.hex(block.header.transactionsTrie),\n      stateRoot: to.hex(block.header.stateRoot),\n      receiptsRoot: to.hex(block.header.receiptTrie),\n      miner: to.hex(block.header.coinbase),\n      difficulty: to.rpcQuantityHexString(block.header.difficulty),\n      totalDifficulty: to.rpcQuantityHexString(block.header.difficulty), // TODO: Figure out what to do here.\n      extraData: to.rpcDataHexString(block.header.extraData),\n      size: to.hex(1000), // TODO: Do something better here\n      gasLimit: to.rpcQuantityHexString(block.header.gasLimit),\n      gasUsed: to.rpcQuantityHexString(block.header.gasUsed),\n      timestamp: to.rpcQuantityHexString(block.header.timestamp),\n      transactions: block.transactions.map(function(tx) {\n        if (includeFullTransactions) {\n          return tx.toJsonRpc(block);\n        } else {\n          return to.hex(tx.hash());\n        }\n      }),\n      uncles: [] // block.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n    };\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst Provider = require(\"./lib/provider\");\nconst Server = require(\"./lib/server\");\n\n// This interface exists so as not to cause breaking changes.\nmodule.exports = {\n  server: function(options) {\n    return Server.create(options);\n  },\n  provider: function(options) {\n    return new Provider(options);\n  },\n  _webpacked: true\n};\n","module.exports = require(\"web3-provider-engine\");","module.exports = require(\"web3-provider-engine/subproviders/subscriptions\");","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(RequestFunnel, Subprovider);\n\nmodule.exports = RequestFunnel;\n\n// See if any payloads for the specified methods are marked as external.\n// If they are external, and match the method list, process them one at\n// a time.\nfunction RequestFunnel() {\n  // We use an object here for O(1) lookups (speed).\n  this.methods = {\n    eth_call: true,\n    eth_getStorageAt: true,\n    eth_sendTransaction: true,\n    eth_sendRawTransaction: true,\n\n    // Ensure block filter and filter changes are process one at a time\n    // as well so filter requests that come in after a transaction get\n    // processed once that transaction has finished processing.\n    eth_newBlockFilter: true,\n    eth_getFilterChanges: true,\n    eth_getFilterLogs: true\n  };\n  this.queue = [];\n  this.isWorking = false;\n}\n\nRequestFunnel.prototype.handleRequest = function(payload, next, end) {\n  if (payload.external !== true || this.methods[payload.method] !== true) {\n    return next();\n  }\n\n  this.queue.push([payload, next]);\n\n  if (this.isWorking === false) {\n    this.processNext();\n  }\n};\n\nRequestFunnel.prototype.processNext = function() {\n  var self = this;\n\n  if (this.queue.length === 0) {\n    this.isWorking = false;\n    return;\n  }\n\n  this.isWorking = true;\n\n  var item = this.queue.shift();\n  var next = item[1];\n\n  next(function(error, request, cb) {\n    if (error) {\n      return cb(error);\n    }\n    cb();\n    self.processNext();\n  });\n};\n","// It's unforutnate we have to have this subprovider, but it's because\n// we instamine, and web3 isn't written in a way that supports instamining\n// (i.e., it sets up the filter after the transaction has been processed).\n// This block filter will ensure that each block filter will always see\n// the change from the last block to the current block.\n//\n// Note: An added benefit of this is that it shaves off a signifcant\n// amount of time from tests that use web3 and block filters.\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\nvar async = require(\"async\");\nvar to = require(\"../utils/to\");\n\ninherits(DelayedBlockFilter, Subprovider);\n\nmodule.exports = DelayedBlockFilter;\n\nfunction DelayedBlockFilter() {\n  this.watching = {};\n}\n\nDelayedBlockFilter.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method === \"eth_newBlockFilter\") {\n    return this.handleNewBlockFilter(payload, next, end);\n  }\n  if (payload.method === \"eth_getFilterChanges\") {\n    return this.handleGetFilterChanges(payload, next, end);\n  }\n\n  next();\n};\n\nDelayedBlockFilter.prototype.handleNewBlockFilter = function(payload, next, end) {\n  var self = this;\n\n  // Let this filter process and add it to our watch list.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n    self.watching[result] = true;\n    cb();\n  });\n};\n\nDelayedBlockFilter.prototype.handleGetFilterChanges = function(payload, next, end) {\n  var self = this;\n  var filterId = payload.params[0];\n\n  if (!this.watching[filterId]) {\n    return next();\n  }\n\n  // Get the changes, and then alter the result.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n\n    var currentBlockHash;\n    var previousBlockHash;\n    var blockNumber;\n\n    async.series(\n      [\n        function(c) {\n          // If we have a result, use it.\n          if (result.length !== 0) {\n            currentBlockHash = result[0];\n            c();\n          } else {\n            // Otherwise, get the current block number.\n            self.emitPayload(\n              {\n                method: \"eth_blockNumber\"\n              },\n              function(err, res) {\n                if (err) {\n                  return c(err);\n                }\n                blockNumber = to.number(res.result);\n                c();\n              }\n            );\n          }\n        },\n        function(c) {\n          // If we got a block number above, meaning, we didn't get a block hash,\n          // skip this step.\n          if (blockNumber) {\n            return c();\n          }\n\n          // If not skipped, then we got a block hash, and we need to get a block number from it.\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByHash\",\n              params: [currentBlockHash, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              blockNumber = to.number(res.result.number);\n              c();\n            }\n          );\n        },\n        function(c) {\n          // If we're at block 0, return no changes. See final function below.\n          blockNumber = to.number(blockNumber);\n          if (blockNumber === 0) {\n            previousBlockHash = undefined;\n            return c();\n          }\n\n          // If at this point, we do have a block number, so let's subtract one\n          // from it and get the block hash of the block before it.\n          blockNumber = blockNumber - 1;\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByNumber\",\n              params: [blockNumber, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              previousBlockHash = res.result.hash;\n              c();\n            }\n          );\n        }\n      ],\n      function(err) {\n        if (err) {\n          // Unfortunately the subprovider code doesn't let us return an error\n          // through the callback cb(). So we'll just ignore it.... (famous last words).\n        }\n\n        // If we got the previous block, use it. Otherwise do nothing.\n        // Then stop watching because we only want on getFilterChanges to react this way.\n        if (previousBlockHash) {\n          result[0] = previousBlockHash;\n        }\n\n        delete self.watching[filterId];\n        cb();\n      }\n    );\n  });\n};\n","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(GethDefaults, Subprovider);\n\nmodule.exports = GethDefaults;\n\nfunction GethDefaults() {}\n\n// Massage eth_estimateGas requests, setting default data (e.g., from) if\n// not specified. This is here specifically to make the testrpc\n// react like Geth.\nGethDefaults.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method !== \"eth_estimateGas\" && payload.method !== \"eth_call\") {\n    return next();\n  }\n\n  var params = payload.params[0];\n\n  if (params.from == null) {\n    this.emitPayload(\n      {\n        method: \"eth_coinbase\"\n      },\n      function(err, result) {\n        if (err) {\n          return end(err);\n        }\n\n        var coinbase = result.result;\n\n        params.from = coinbase;\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar StateManager = require(\"../statemanager.js\");\nvar to = require(\"../utils/to\");\nvar TXRejectedError = require(\"../utils/txrejectederror\");\n\nvar blockHelper = require(\"../utils/block_helper\");\nvar pkg = require(\"../../package.json\");\nconst { BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\n\ninherits(GethApiDouble, Subprovider);\n\nfunction GethApiDouble(options, provider) {\n  var self = this;\n\n  this.state = options.state || new StateManager(options, provider);\n  this.options = options;\n  this.initialized = false;\n\n  this.initialization_error = null;\n  this.post_initialization_callbacks = [];\n\n  this.state.initialize(function(err) {\n    if (err) {\n      self.initialization_error = err;\n    }\n    self.initialized = true;\n\n    var callbacks = self.post_initialization_callbacks;\n    self.post_initialization_callbacks = [];\n\n    callbacks.forEach(function(callback) {\n      setImmediate(function() {\n        callback(self.initialization_error, self.state);\n      });\n    });\n  });\n}\n\nGethApiDouble.prototype.waitForInitialization = function(callback) {\n  var self = this;\n  if (self.initialized === false) {\n    self.post_initialization_callbacks.push(callback);\n  } else {\n    callback(self.initialization_error, self.state);\n  }\n};\n\n// Function to not pass methods through until initialization is finished\nGethApiDouble.prototype.handleRequest = function(payload, next, end) {\n  var self = this;\n\n  if (self.initialization_error != null) {\n    return end(self.initialization_error);\n  }\n\n  if (self.initialized === false) {\n    self.waitForInitialization(self.getDelayedHandler(payload, next, end));\n    return;\n  }\n\n  var method = self[payload.method];\n\n  if (method == null) {\n    return end(new Error(\"Method \" + payload.method + \" not supported.\"));\n  }\n\n  var params = payload.params || [];\n  var args = [].concat(params);\n\n  var addedBlockParam = false;\n\n  if (self.requiresDefaultBlockParameter(payload.method) && args.length < method.length - 1) {\n    args.push(\"latest\");\n    addedBlockParam = true;\n  }\n\n  args.push(end);\n\n  // avoid crash by checking to make sure that we haven't specified too many arguments\n  if (\n    args.length > method.length ||\n    (method.minLength !== undefined && args.length < method.minLength) ||\n    (method.minLength === undefined && args.length < method.length)\n  ) {\n    var errorMessage = `Incorrect number of arguments. Method '${payload.method}' requires `;\n    if (method.minLength) {\n      errorMessage += `between ${method.minLength - 1} and ${method.length - 1} arguments. `;\n    } else {\n      errorMessage += `exactly ${method.length - 1} arguments. `;\n    }\n\n    if (addedBlockParam) {\n      errorMessage += \"Including the implicit block argument, r\";\n    } else {\n      // new sentence, capitalize it.\n      errorMessage += \"R\";\n    }\n    errorMessage += `equest specified ${args.length - 1} arguments: ${JSON.stringify(args)}.`;\n\n    return end(new Error(errorMessage));\n  }\n\n  method.apply(self, args);\n};\n\nGethApiDouble.prototype.getDelayedHandler = function(payload, next, end) {\n  var self = this;\n  return function(err, state) {\n    if (err) {\n      end(err);\n    }\n    self.handleRequest(payload, next, end);\n  };\n};\n\nGethApiDouble.prototype.requiresDefaultBlockParameter = function(method) {\n  // object for O(1) lookup.\n  var methods = {\n    eth_getBalance: true,\n    eth_getCode: true,\n    eth_getTransactionCount: true,\n    eth_getStorageAt: true,\n    eth_call: true,\n    eth_estimateGas: true\n  };\n\n  return methods[method] === true;\n};\n\n// Handle individual requests.\n\nGethApiDouble.prototype.eth_accounts = function(callback) {\n  callback(null, Object.keys(this.state.accounts));\n};\n\nGethApiDouble.prototype.eth_blockNumber = function(callback) {\n  this.state.blockNumber(function(err, result) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.hex(result));\n  });\n};\n\nGethApiDouble.prototype.eth_coinbase = function(callback) {\n  callback(null, this.state.coinbase);\n};\n\nGethApiDouble.prototype.eth_mining = function(callback) {\n  callback(null, this.state.is_mining);\n};\n\nGethApiDouble.prototype.eth_hashrate = function(callback) {\n  callback(null, \"0x0\");\n};\n\nGethApiDouble.prototype.eth_gasPrice = function(callback) {\n  callback(null, utils.addHexPrefix(this.state.gasPrice()));\n};\n\nGethApiDouble.prototype.eth_getBalance = function(address, blockNumber, callback) {\n  this.state.getBalance(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getCode = function(address, blockNumber, callback) {\n  this.state.getCode(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getBlockByNumber = function(blockNumber, includeFullTransactions, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, blockHelper.toJSON(block, includeFullTransactions));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockByHash = function(txHash, includeFullTransactions, callback) {\n  this.eth_getBlockByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByNumber = function(blockNumber, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        // block doesn't exist\n        return callback(null, null);\n      }\n      return callback(err);\n    }\n    callback(null, block.transactions.length);\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByHash = function(blockHash, callback) {\n  this.eth_getBlockTransactionCountByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getTransactionReceipt = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt && receipt.block) {\n      result = receipt.toJSON();\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByHash = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      // if there is no block then the transaction is still pending\n      if (!receipt.block) {\n        // assemble the block object with null values for pending transactions\n        receipt.block = {\n          transactions: [],\n          hash: () => {\n            return null;\n          },\n          header: { number: null }\n        };\n\n        result = receipt.tx.toJsonRpc(receipt.block);\n      } else {\n        result = receipt.tx.toJsonRpc(receipt.block);\n      }\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockHashAndIndex = function(hashOrNumber, index, callback) {\n  index = to.number(index);\n\n  this.state.getBlock(hashOrNumber, function(err, block) {\n    if (err) {\n      // block doesn't exist by that hash\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    if (index >= block.transactions.length) {\n      return callback(new Error(\"Transaction at index \" + to.hex(index) + \" does not exist in block.\"));\n    }\n\n    var tx = block.transactions[index];\n    var result = tx.toJsonRpc(block);\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockNumberAndIndex = function(hashOrNumber, index, callback) {\n  this.eth_getTransactionByBlockHashAndIndex(hashOrNumber, index, callback);\n};\n\nGethApiDouble.prototype.eth_getTransactionCount = function(address, blockNumber, callback) {\n  this.state.getTransactionCount(address, blockNumber, (err, count) => {\n    if (err instanceof BlockOutOfRangeError) {\n      return callback(null, null);\n    }\n    return callback(err, count);\n  });\n};\n\nGethApiDouble.prototype.eth_sign = function(address, dataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.sign(address, dataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_signTypedData = function(address, typedDataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.signTypedData(address, typedDataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_sendTransaction = function(txData, callback) {\n  this.state.queueTransaction(\"eth_sendTransaction\", txData, null, callback);\n};\n\nGethApiDouble.prototype.eth_sendRawTransaction = function(rawTx, callback) {\n  let data;\n  if (rawTx) {\n    data = to.buffer(rawTx);\n  }\n\n  if (data === undefined) {\n    throw new TXRejectedError(\"rawTx must be a string, JSON-encoded Buffer, or Buffer.\");\n  }\n\n  this.state.queueRawTransaction(data, callback);\n};\n\nGethApiDouble.prototype.eth_call = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n\n  this.state.queueTransaction(\"eth_call\", txData, blockNumber, callback); // :(\n};\n\nGethApiDouble.prototype.eth_estimateGas = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n  this.state.queueTransaction(\"eth_estimateGas\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getStorageAt = function(address, position, blockNumber, callback) {\n  this.state.queueStorage(address, position, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_newBlockFilter = function(callback) {\n  var filterId = utils.addHexPrefix(utils.intToHex(this.state.latestFilterId));\n  this.state.latestFilterId += 1;\n  callback(null, filterId);\n};\n\nGethApiDouble.prototype.eth_getFilterChanges = function(filterId, callback) {\n  var blockHash = this.state\n    .latestBlock()\n    .hash()\n    .toString(\"hex\");\n  // Mine a block after each request to getFilterChanges so block filters work.\n  this.state.mine();\n  callback(null, [blockHash]);\n};\n\nGethApiDouble.prototype.eth_getLogs = function(filter, callback) {\n  this.state.getLogs(filter, callback);\n};\n\nGethApiDouble.prototype.eth_uninstallFilter = function(filterId, callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.eth_protocolVersion = function(callback) {\n  callback(null, \"63\");\n};\n\nGethApiDouble.prototype.bzz_hive = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.bzz_info = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.shh_version = function(callback) {\n  callback(null, \"2\");\n};\n\nGethApiDouble.prototype.eth_getCompilers = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.eth_syncing = function(callback) {\n  callback(null, false);\n};\n\nGethApiDouble.prototype.net_listening = function(callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.net_peerCount = function(callback) {\n  callback(null, 0);\n};\n\nGethApiDouble.prototype.web3_clientVersion = function(callback) {\n  callback(null, \"EthereumJS TestRPC/v\" + pkg.version + \"/ethereum-js\");\n};\n\nGethApiDouble.prototype.web3_sha3 = function(string, callback) {\n  callback(null, to.hex(utils.sha3(string)));\n};\n\nGethApiDouble.prototype.net_version = function(callback) {\n  // net_version returns a string containing a base 10 integer.\n  callback(null, this.state.net_version + \"\");\n};\n\nGethApiDouble.prototype.miner_start = function(threads, callback) {\n  if (!callback && typeof threads === \"function\") {\n    callback = threads;\n    threads = null;\n  }\n\n  this.state.startMining(function(err) {\n    callback(err, true);\n  });\n};\n\n// indicate that `miner_start` only requires one argument (the callback)\nGethApiDouble.prototype.miner_start.minLength = 1;\n\nGethApiDouble.prototype.miner_stop = function(callback) {\n  this.state.stopMining(function(err) {\n    callback(err, true);\n  });\n};\n\nGethApiDouble.prototype.rpc_modules = function(callback) {\n  // returns the availible api modules and versions\n  callback(null, { eth: \"1.0\", net: \"1.0\", rpc: \"1.0\", web3: \"1.0\", evm: \"1.0\", personal: \"1.0\" });\n};\n\nGethApiDouble.prototype.personal_listAccounts = function(callback) {\n  callback(null, Object.keys(this.state.personal_accounts));\n};\n\nGethApiDouble.prototype.personal_newAccount = function(password, callback) {\n  var account = this.state.createAccount({ generate: true });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_importRawKey = function(rawKey, password, callback) {\n  var account = this.state.createAccount({ secretKey: rawKey });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_lockAccount = function(address, callback) {\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var error = \"Account not found\";\n    return callback(error);\n  }\n  delete this.state.unlocked_accounts[address.toLowerCase()];\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_unlockAccount = function(address, password, duration, callback) {\n  // FIXME handle duration\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var accountError = \"Account not found\";\n    return callback(accountError);\n  }\n\n  var storedPassword = this.state.account_passwords[address.toLowerCase()];\n  if (storedPassword !== undefined && storedPassword !== password) {\n    var passwordError = \"Invalid password\";\n    return callback(passwordError);\n  }\n\n  this.state.unlocked_accounts[address.toLowerCase()] = true;\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_sendTransaction = function(txData, password, callback) {\n  if (txData.from == null) {\n    var error = \"Sender not found\";\n    callback(error);\n    return;\n  }\n\n  var from = utils.addHexPrefix(txData.from).toLowerCase();\n\n  var self = this;\n  self.personal_unlockAccount(from, password, null, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.state.queueTransaction(\"eth_sendTransaction\", txData, null, function(err, ret) {\n      self.state.unlocked_accounts[from.toLowerCase()] = false;\n      callback(err, ret);\n    });\n  });\n};\n\n/* Functions for testing purposes only. */\n\nGethApiDouble.prototype.evm_snapshot = function(callback) {\n  this.state.snapshot(callback);\n};\n\nGethApiDouble.prototype.evm_revert = function(snapshotId, callback) {\n  this.state.revert(snapshotId, callback);\n};\n\nGethApiDouble.prototype.evm_increaseTime = function(seconds, callback) {\n  callback(null, this.state.blockchain.increaseTime(seconds));\n};\n\nGethApiDouble.prototype.evm_setTime = function(date, callback) {\n  callback(null, this.state.blockchain.setTime(date));\n};\n\nGethApiDouble.prototype.evm_mine = function(timestamp, callback) {\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n  this.state.processBlock(timestamp, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err, \"0x0\");\n  });\n};\n\n// indicate that `evm_mine` only requires one argument (the callback)\nGethApiDouble.prototype.evm_mine.minLength = 1;\n\nGethApiDouble.prototype.debug_traceTransaction = function(txHash, params, callback) {\n  if (typeof params === \"function\") {\n    callback = params;\n    params = [];\n  }\n\n  this.state.queueTransactionTrace(txHash, params, callback);\n};\n\n/*\n  RPC AUDIT:\n  TODO ETH: eth_getUncleCountByBlockHash, eth_getUncleCountByBlockNumber, eth_getUncleByBlockHashAndIndex,\n        eth_getUncleByBlockNumberAndIndex, eth_getWork, eth_submitWork, eth_submitHashrate\n\n  TODO DB: db_putString, db_getString, db_putHex, db_getHex\n\n  TODO WHISPER: shh_post, shh_newIdentity, shh_hasIdentity, shh_newGroup, shh_addToGroup,\n        shh_newFilter, shh_uninstallFilter, shh_getFilterChanges, shh_getMessages\n*/\n\n/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block.\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockHash = function(hash, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns the number of uncles in a block from a block matching the given block number.\n *\n * @param {QUANTITY} blockNumber -\n *  ^integer of a block number, or the string \"latest\", \"earliest\" or \"pending\". Ex: '0xe8', // 232\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockNumber = function(blockNumber, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns information about a uncle of a block by hash and uncle index position.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block\n * @param {QUANTITY} index - the uncle's index position.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Object} result - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockHashAndIndex = function(hash, index, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns information about a uncle of a block by number and uncle index position.\n *\n * @param {QUANTITY} blockNumber -\n * ^a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block parameter.\n * @param {QUANTITY} uncleIndex - the uncle's index position.\n * @callback callback\n * @param {error} err - Error object\n * @param {Object} resutl - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockNumberAndIndex = function(blockNumber, uncleIndex, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns: An Array with the following elements\n * 1: DATA, 32 Bytes - current block header pow-hash\n * 2: DATA, 32 Bytes - the seed hash used for the DAG.\n * 3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n *\n * @param {QUANTITY} filterId - A filter id\n * @callback callback\n * @param {error} err - Error object\n * @param {Array} result - the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n */\nGethApiDouble.prototype.eth_getWork = function(filterId, callback) {\n  callback(null, []);\n};\n\n/**\n * Used for submitting a proof-of-work solution\n *\n * @param {DATA, 8 Bytes} nonce - The nonce found (64 bits)\n * @param {DATA, 32 Bytes} powHash - The header's pow-hash (256 bits)\n * @param {DATA, 32 Bytes} digest - The mix digest (256 bits)\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the provided solution is valid, otherwise false.\n */\nGethApiDouble.prototype.eth_submitWork = function(nonce, powHash, digest, callback) {\n  callback(null, false);\n};\n\n/**\n * Used for submitting mining hashrate.\n *\n * @param {String} hashRate - a hexadecimal string representation (32 bytes) of the hash rate\n * @param {String} clientID - A random hexadecimal(32 bytes) ID identifying the client\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if submitting went through succesfully and false otherwise.\n */\nGethApiDouble.prototype.eth_submitHashrate = function(hashRate, clientID, callback) {\n  callback(null, false);\n};\n\n/**\n * Stores a string in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {String} value - String to store.\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putString = function(dbName, key, value, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns string from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} - Error Object\n * @param {String} result - The previously stored string.\n */\nGethApiDouble.prototype.db_getString = function(dbName, key, callback) {\n  callback(null, \"\");\n};\n\n/**\n * Stores binary data in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {DATA} data - Data to store.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putHex = function(dbName, key, data, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns binary data from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA} result - The previously stored data.\n */\nGethApiDouble.prototype.db_getHex = function(dbName, key, callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Sends a whisper message.\n *\n * @param {DATA, 60 Bytes} from - (optional) The identity of the sender.\n * @param {DATA, 60 Bytes} to -\n *  ^(optional) The identity of the receiver. When present whisper will encrypt the message so that\n *  only the receiver can decrypt it.\n * @param {Array of DATA} topics - Array of DATA topics, for the receiver to identify messages.\n * @param {DATA} payload - The payload of the message.\n * @param {QUANTITY} priority - The integer of the priority in a range from ... (?).\n * @param {QUANTITY} ttl - integer of the time to live in seconds.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the message was sent, otherwise false.\n */\nGethApiDouble.prototype.shh_post = function(from, to, topics, payload, priority, ttl, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates new whisper identity in the client.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new identiy.\n */\nGethApiDouble.prototype.shh_newIdentity = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Checks if the client hold the private keys for a given identity.\n *\n * @param {DATA, 60 Bytes} address - The identity address to check.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the client holds the privatekey for that identity, otherwise false.\n */\nGethApiDouble.prototype.shh_hasIdentity = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates a new group.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new group.\n */\nGethApiDouble.prototype.shh_newGroup = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Adds a whisper identity to the group\n *\n * @param {DATA, 60 Bytes} - The identity address to add to a group.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_addToGroup = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n *\n * @param {DATA, 60 Bytes} to -\n * ^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n *  if the client holds the private key to this identity.\n * @param {Array of DATA} topics - Array of DATA topics which the incoming message's topics should match.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_newFilter = function(to, topics, callback) {\n  callback(null, false);\n};\n\n/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - true if the filter was successfully uninstalled, otherwise false.\n */\nGethApiDouble.prototype.shh_uninstallFilter = function(id, callback) {\n  callback(null, false);\n};\n\n/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n */\nGethApiDouble.prototype.shh_getFilterChanges = function(id, callback) {\n  callback(null, []);\n};\n\n/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - See: shh_getFilterChanges\n */\nGethApiDouble.prototype.shh_getMessages = function(id, callback) {\n  callback(null, false);\n};\n\nmodule.exports = GethApiDouble;\n","var Account = require(\"ethereumjs-account\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Transaction = require(\"./utils/transaction\");\nvar utils = require(\"ethereumjs-util\");\nvar seedrandom = require(\"seedrandom\");\nvar bip39 = require(\"bip39\");\nvar wallet = require(\"ethereumjs-wallet\");\nvar hdkey = require(\"ethereumjs-wallet/hdkey\");\nvar async = require(\"async\");\nvar BlockchainDouble = require(\"./blockchain_double.js\");\nvar ForkedBlockchain = require(\"./utils/forkedblockchain.js\");\nvar Web3 = require(\"web3\");\nvar sigUtil = require(\"eth-sig-util\");\nvar _ = require(\"lodash\");\nconst { BlockOutOfRangeError } = require(\"./utils/errorhelper\");\n\nconst ZERO_BUFFER = Buffer.from([0]);\n\nvar to = require(\"./utils/to\");\nvar random = require(\"./utils/random\");\nvar TXRejectedError = require(\"./utils/txrejectederror\");\n\nfunction StateManager(options, provider) {\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  if (options.fork) {\n    this.blockchain = new ForkedBlockchain(options);\n  } else {\n    this.blockchain = new BlockchainDouble(options);\n  }\n\n  this.vm = this.blockchain.vm;\n  this.stateTrie = this.blockchain.stateTrie;\n\n  this.accounts = {};\n  this.secure = !!options.secure;\n  this.account_passwords = {};\n  this.personal_accounts = {};\n  this.total_accounts = options.total_accounts;\n  this.coinbase = null;\n\n  this.latest_filter_id = 1;\n\n  // This queue manages actions that shouldn't be run in parallel.\n  // The action_processing flag ensures new actions are queued instead of\n  // run immediately.\n  this.action_queue = [];\n  this.action_processing = false;\n\n  this.snapshots = [];\n  this.logger = options.logger;\n  this.net_version = options.network_id;\n  this.mnemonic = options.mnemonic;\n  this.wallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(this.mnemonic));\n  this.wallet_hdpath = options.hdPath;\n\n  this.gasPriceVal = to.rpcQuantityHexString(options.gasPrice);\n\n  this.is_mining = true;\n  this.blockTime = options.blockTime;\n  this.is_mining_on_interval = !!options.blockTime;\n  this.mining_interval_timeout = null;\n\n  this._provider = provider;\n}\n\nconst defaultOptions = {\n  total_accounts: 10,\n  gasPrice: \"0x77359400\", // 2 gwei\n  default_balance_ether: 100,\n  unlocked_accounts: [],\n  hdPath: \"m/44'/60'/0'/0/\"\n};\n\nStateManager.prototype._applyDefaultOptions = function(options) {\n  // do this so that we can use the same seed on our next run and get the same\n  // results without explicitly setting a seed up front\n  if (!options.seed) {\n    options.seed = random.randomAlphaNumericString(10, seedrandom());\n  }\n\n  // generate a randomized default mnemonic\n  if (!options.mnemonic) {\n    let randomBytes = random.randomBytes(16, seedrandom(options.seed));\n    options.mnemonic = bip39.entropyToMnemonic(randomBytes.toString(\"hex\"));\n  }\n\n  if (!options.fork && !options.network_id) {\n    options.network_id = new Date().getTime();\n  }\n\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nStateManager.prototype.initialize = function(callback) {\n  var self = this;\n\n  var accounts = [];\n\n  let defaultBalanceWei = to.hex(Web3.utils.toWei(self.options.default_balance_ether.toString(), \"ether\"));\n\n  if (self.options.accounts) {\n    accounts = self.options.accounts.map(self.createAccount.bind(self));\n  } else {\n    if (!self.total_accounts) {\n      return callback(\n        new Error(\"Cannot initialize chain: either options.accounts or options.total_accounts must be specified\")\n      );\n    }\n\n    for (var i = 0; i < self.total_accounts; i++) {\n      accounts.push(\n        self.createAccount({\n          index: i,\n          balance: defaultBalanceWei\n        })\n      );\n    }\n  }\n\n  self.coinbase = to.hex(accounts[0].address);\n  self.accounts = {};\n\n  accounts.forEach(function(data) {\n    self.accounts[data.address] = data;\n    self.personal_accounts[data.address.toLowerCase()] = true;\n  });\n\n  // Turn array into object, mostly for speed purposes.\n  // No need for caller to specify private keys.\n  self.unlocked_accounts = self.options.unlocked_accounts.reduce(function(obj, address) {\n    // If it doesn't have a hex prefix, must be a number (either a string or number type).\n    if ((address + \"\").indexOf(\"0x\") !== 0) {\n      let idx = parseInt(address);\n      let account = accounts[idx];\n      if (!account) {\n        throw new Error(`Account at index ${idx} not found. Max index available is ${accounts.length - 1}.`);\n      }\n      address = account.address.toLowerCase();\n    }\n\n    obj[address.toLowerCase()] = true; // can be any value\n    return obj;\n  }, {});\n\n  if (!self.secure) {\n    accounts.forEach(function(data) {\n      self.unlocked_accounts[data.address.toLowerCase()] = data;\n    });\n  }\n\n  self.blockchain.initialize(accounts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If the user didn't pass a specific version id in, then use the\n    // forked blockchain's version (if it exists) or create our own.\n    if (!self.net_version) {\n      self.net_version = self.blockchain.forkVersion;\n    }\n\n    if (self.is_mining_on_interval) {\n      self.mineOnInterval();\n    }\n\n    callback();\n  });\n};\n\nStateManager.prototype._minerCancellationToken = null;\nStateManager.prototype.mineOnInterval = function() {\n  // cancel the a previous miner's timeout\n  clearTimeout(this.mining_interval_timeout);\n\n  // make sure a pending eth_mine doesn't come back and execute mineOnInterval\n  // again...\n  if (this._minerCancellationToken !== null) {\n    this._minerCancellationToken.cancelled = true;\n  }\n\n  // if mining was stopped `mineOnInterval` shouldn't start mining again\n  if (!this.is_mining) {\n    this.logger.log(\"Warning: mineOnInterval called when miner was stopped\");\n    return;\n  }\n\n  const cancellationToken = { cancelled: false };\n  this._minerCancellationToken = cancellationToken;\n\n  const timeout = (this.mining_interval_timeout = setTimeout(\n    this._provider.send.bind(this._provider),\n    this.blockTime * 1000,\n    { method: \"evm_mine\" },\n    () => {\n      if (!cancellationToken.cancelled) {\n        this.mineOnInterval.bind(this)();\n      }\n    }\n  ));\n\n  // Ensure this won't keep a node process open.\n  if (typeof timeout.unref === \"function\") {\n    timeout.unref();\n  }\n};\n\nStateManager.prototype.createAccount = function(opts, i) {\n  var secretKey;\n\n  if (opts.generate) {\n    secretKey = wallet.generate().getPrivateKey();\n  } else if (opts.secretKey) {\n    secretKey = utils.toBuffer(to.hex(opts.secretKey));\n  } else {\n    var index = typeof opts.index === \"undefined\" ? i : opts.index;\n    var acct = this.wallet.derivePath(this.wallet_hdpath + index); // index is a number\n    secretKey = acct.getWallet().getPrivateKey(); // Buffer\n  }\n\n  var publicKey = utils.privateToPublic(secretKey);\n  var address = utils.publicToAddress(publicKey);\n\n  var account = new Account();\n\n  account.balance = to.hex(opts.balance);\n\n  var data = {\n    secretKey: secretKey,\n    publicKey: publicKey,\n    address: to.hex(address).toLowerCase(),\n    account: account\n  };\n\n  return data;\n};\n\nStateManager.prototype.blockNumber = function(callback) {\n  return this.blockchain.getHeight(callback);\n};\n\nStateManager.prototype.gasPrice = function() {\n  return this.gasPriceVal;\n};\n\nStateManager.prototype.getBalance = function(address, number, callback) {\n  this.blockchain.getBalance(address, number, function(err, balance) {\n    if (balance) {\n      balance = to.rpcQuantityHexString(balance);\n    }\n    callback(err, balance);\n  });\n};\n\nStateManager.prototype.getTransactionCount = function(address, number, callback) {\n  this.blockchain.getNonce(address, number, function(err, nonce) {\n    if (nonce) {\n      nonce = to.rpcQuantityHexString(nonce);\n    }\n    callback(err, nonce);\n  });\n};\n\nStateManager.prototype.getCode = function(address, number, callback) {\n  this.blockchain.getCode(address, number, function(err, code) {\n    if (code) {\n      code = to.hex(code);\n    }\n    callback(err, code);\n  });\n};\n\nStateManager.prototype.queueRawTransaction = function(data, callback) {\n  const tx = new Transaction(data, Transaction.types.signed);\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = to.hex(tx.from).toLowerCase();\n  this._queueTransaction(\"eth_sendRawTransaction\", tx, from, null, callback);\n};\n\nStateManager.prototype.queueStorage = function(address, position, block, callback) {\n  this.action_queue.push({\n    method: \"eth_getStorageAt\",\n    address: utils.addHexPrefix(address),\n    position: utils.addHexPrefix(position),\n    block: block,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransaction = function(method, txJsonRpc, blockNumber, callback) {\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = txJsonRpc.from ? to.hex(txJsonRpc.from).toLowerCase() : null;\n\n  if (from == null) {\n    callback(new TXRejectedError(\"from not found; is required\"));\n    return;\n  }\n\n  // Error checks. It's possible to JSON.stringify a Buffer to JSON.\n  // we actually now handle this \"properly\" (not sure about spec), but for\n  // legacy reasons we don't allow it.\n  if (txJsonRpc.to && typeof txJsonRpc.to !== \"string\") {\n    return callback(new TXRejectedError(\"Invalid to address\"));\n  }\n\n  const isKnownAccount = this.accounts.hasOwnProperty(from);\n\n  if (method === \"eth_sendTransaction\" && !this.unlocked_accounts.hasOwnProperty(from)) {\n    const msg = isKnownAccount ? \"signer account is locked\" : \"sender account not recognized\";\n    return callback(new TXRejectedError(msg));\n  }\n\n  let type = Transaction.types.none;\n  if (!isKnownAccount || method === \"eth_call\") {\n    type |= Transaction.types.fake;\n  }\n\n  let tx;\n  try {\n    tx = Transaction.fromJSON(txJsonRpc, type);\n    this._setTransactionDefaults(tx);\n  } catch (e) {\n    callback(e);\n    return;\n  }\n  this._queueTransaction(method, tx, from, blockNumber, callback);\n};\n\nStateManager.prototype._setTransactionDefaults = function(tx) {\n  if (tx.gasLimit.length === 0) {\n    tx.gasLimit = utils.toBuffer(this.blockchain.defaultTransactionGasLimit);\n  }\n\n  if (tx.gasPrice.length === 0) {\n    tx.gasPrice = utils.toBuffer(this.gasPriceVal);\n  }\n\n  if (tx.value.length === 0) {\n    tx.value = Buffer.from([0]);\n  }\n\n  if (tx.to.length === 0 || tx.to.equals(ZERO_BUFFER)) {\n    tx.to = Buffer.allocUnsafe(0);\n  }\n};\n\nStateManager.prototype._queueTransaction = function(method, tx, from, blockNumber, callback) {\n  if (!(tx instanceof Transaction)) {\n    throw new TXRejectedError(\"tx must be of type Transaction\");\n  }\n\n  // If the transaction has a higher gas limit than the block gas limit, error.\n  if (to.number(tx.gasLimit) > to.number(this.blockchain.blockGasLimit)) {\n    return callback(new TXRejectedError(\"Exceeds block gas limit\"));\n  }\n\n  this.action_queue.push({\n    method,\n    from,\n    tx,\n    callback,\n    blockNumber\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransactionTrace = function(txHash, params, callback) {\n  this.action_queue.push({\n    method: \"debug_traceTransaction\",\n    hash: to.hex(txHash),\n    params: params,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.processNextAction = function(override) {\n  var self = this;\n\n  if (override !== true) {\n    if (this.action_processing === true || this.action_queue.length === 0) {\n      return;\n    }\n  }\n\n  var queued = this.action_queue.shift();\n\n  // Set the flag that we're currently processing something.\n  this.action_processing = true;\n\n  var intermediary = function(err, result) {\n    queued.callback(err, result);\n\n    if (self.action_queue.length > 0) {\n      self.processNextAction(true);\n    } else {\n      self.action_processing = false;\n    }\n  };\n\n  if (typeof queued.method === \"function\") {\n    var result = queued.method();\n    return intermediary(null, result);\n  } else if (queued.method === \"eth_getStorageAt\") {\n    this.blockchain.getStorage(queued.address, queued.position, queued.block, function(err, result) {\n      if (err) {\n        return intermediary(err);\n      }\n\n      if (result) {\n        result = utils.rlp.decode(result);\n      }\n\n      result = to.hex(result || 0);\n      intermediary(null, result);\n    });\n  } else if (queued.method === \"debug_traceTransaction\") {\n    this.blockchain.processTransactionTrace(queued.hash, queued.params, intermediary);\n  } else if (queued.method === \"eth_sendTransaction\" || queued.method === \"eth_sendRawTransaction\") {\n    this.processTransaction(queued.from, queued.tx, intermediary);\n  } else if (queued.method === \"eth_call\") {\n    this.processCall(queued.from, queued.tx, queued.blockNumber, intermediary);\n  } else if (queued.method === \"eth_estimateGas\") {\n    this.processGasEstimate(queued.from, queued.tx, queued.blockNumber, intermediary);\n  }\n};\n\nStateManager.prototype.sign = function(address, dataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  var secretKey = account.secretKey;\n  var msg = Buffer.from(dataToSign.replace(\"0x\", \"\"), \"hex\");\n  var msgHash = utils.hashPersonalMessage(msg);\n  var sgn = utils.ecsign(msgHash, Buffer.from(secretKey));\n  return utils.toRpcSig(sgn.v, sgn.r, sgn.s);\n};\n\nStateManager.prototype.signTypedData = function(address, typedDataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  if (!typedDataToSign.types) {\n    throw new Error(\"cannot sign data; types missing\");\n  }\n\n  if (!typedDataToSign.types.EIP712Domain) {\n    throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n  }\n\n  if (!typedDataToSign.domain) {\n    throw new Error(\"cannot sign data; domain missing\");\n  }\n\n  if (!typedDataToSign.primaryType) {\n    throw new Error(\"cannot sign data; primaryType missing\");\n  }\n\n  if (!typedDataToSign.message) {\n    throw new Error(\"cannot sign data; message missing\");\n  }\n\n  return sigUtil.signTypedData(account.secretKey, { data: typedDataToSign });\n};\n\nStateManager.prototype.printTransactionReceipt = function(txHash, error, callback) {\n  var self = this;\n\n  self.blockchain.getTransactionReceipt(txHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      receipt = receipt.toJSON();\n\n      self.logger.log(\"\");\n      self.logger.log(\"  Transaction: \" + txHash);\n\n      if (receipt.contractAddress != null) {\n        self.logger.log(\"  Contract created: \" + receipt.contractAddress);\n      }\n\n      self.logger.log(\"  Gas usage: \" + parseInt(receipt.gasUsed, 16));\n      self.logger.log(\"  Block Number: \" + parseInt(receipt.blockNumber, 16));\n      self.logger.log(\"  Block Time: \" + new Date(to.number(block.header.timestamp) * 1000).toString());\n\n      if (error) {\n        self.logger.log(\"  Runtime Error: \" + error.error);\n        if (error.reason) {\n          self.logger.log(\"  Revert reason: \" + error.reason);\n        }\n      }\n\n      self.logger.log(\"\");\n\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.processBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  self.blockchain.processNextBlock(timestamp, function(runtimeError, transactions, vmOutput) {\n    if (runtimeError && runtimeError instanceof RuntimeError === false) {\n      // This is bad. Get out.\n      return callback(runtimeError, transactions, vmOutput);\n    }\n\n    // TODO: Can we refactor printTransactionReceipt so it's synchronous?\n    // We technically have the raw vm receipts (though they're not full receipts here...).\n    async.eachSeries(\n      transactions,\n      function(tx, finishedPrinting) {\n        var hash = to.hex(tx.hash());\n        var error = runtimeError == null ? { results: {} } : runtimeError;\n        self.printTransactionReceipt(hash, error.results[hash], finishedPrinting);\n      },\n      callback(runtimeError, transactions, vmOutput)\n    );\n  });\n};\n\nStateManager.prototype.processBlocks = function(totalBlocks, callback) {\n  var self = this;\n\n  if (typeof totalBlocks === \"function\") {\n    callback = totalBlocks;\n    totalBlocks = null;\n  }\n\n  // Note: VM errors (errors that the VM directly returns) trump all runtime errors.\n  var runtimeError = null;\n  var amountProcessed = 0;\n\n  async.whilst(\n    function() {\n      var shouldContinue;\n\n      if (totalBlocks == null) {\n        shouldContinue = self.blockchain.pending_transactions.length > 0;\n      } else {\n        shouldContinue = amountProcessed < totalBlocks;\n      }\n\n      return shouldContinue;\n    },\n    function(done) {\n      self.processBlock(function(err, transactions, vmOutput) {\n        amountProcessed += 1;\n\n        if (err) {\n          if (err instanceof RuntimeError === false) {\n            // This is bad. Get out.\n            return done(err);\n          }\n\n          // We must have a RuntimeError. Merge results if we've found\n          // other runtime errors during this execution.\n          if (runtimeError == null) {\n            runtimeError = err;\n          } else {\n            runtimeError.combine(err);\n          }\n        }\n\n        // Note we don't quit on runtime errors. We keep processing transactions.\n        done();\n      });\n    },\n    function(err) {\n      // Remember: vm errors trump runtime errors\n      callback(err || runtimeError);\n    }\n  );\n};\n\nStateManager.prototype.processCall = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        if (err instanceof BlockOutOfRangeError) {\n          // block doesn't exist\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n\n      var result = \"0x\";\n      if (!results.error && results.vm.return) {\n        result = to.hex(results.vm.return);\n      } else if (results.error) {\n        self.logger.log(`Error processing call: ${results.error}`);\n      }\n\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processGasEstimate = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var result = \"0x\";\n      if (!results.error) {\n        result = results.gasRefund ? to.hex(results.gasUsed.add(results.gasRefund)) : to.hex(results.gasUsed);\n      } else {\n        self.logger.log(`Error calculating gas estimate: ${results.error}`);\n      }\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processTransaction = function(from, tx, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.queueTransaction(tx);\n\n    var txHash = to.hex(tx.hash());\n\n    // If we're not currently mining or we're mining on an interval,\n    // only queue the transaction, don't process it.\n    if (self.is_mining === false || self.is_mining_on_interval) {\n      return callback(null, txHash);\n    }\n\n    self.processBlocks(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.getTransactionReceipt = function(hash, callback) {\n  this.blockchain.getTransactionReceipt(hash, function(err, receipt) {\n    if (err && err.notFound) {\n      // Return null if the receipt's not found.\n      return callback(null, null);\n    }\n    callback(err, receipt);\n  });\n};\n\nStateManager.prototype.getBlock = function(hashOrNumber, callback) {\n  this.blockchain.getBlock(hashOrNumber, callback);\n};\n\nStateManager.prototype.getLogs = function(filter, callback) {\n  var self = this;\n\n  // filter.address may be a single address or an array\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n  var expectedAddress = filter.address && (Array.isArray(filter.address) ? filter.address : [filter.address]);\n  expectedAddress =\n    expectedAddress &&\n    expectedAddress.map(function(a) {\n      return a.toLowerCase();\n    });\n  var expectedTopics = filter.topics || [];\n\n  async.parallel(\n    {\n      fromBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.fromBlock || \"latest\"),\n      toBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.toBlock || \"latest\"),\n      latestBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, \"latest\")\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var fromBlock = results.fromBlock;\n      var toBlock = results.toBlock;\n      var latestBlock = results.latestBlock;\n\n      if (toBlock > latestBlock) {\n        toBlock = latestBlock;\n      }\n\n      var logs = [];\n      var current = fromBlock;\n\n      async.whilst(\n        function() {\n          return current <= toBlock;\n        },\n        function(finished) {\n          self.blockchain.getBlockLogs(current, function(err, blockLogs) {\n            if (err) {\n              return finished(err);\n            }\n\n            // Filter logs that match the address\n            var filtered = !expectedAddress\n              ? blockLogs\n              : blockLogs.filter(function(log) {\n                return expectedAddress.indexOf(log.address.toLowerCase()) > -1;\n              });\n\n            // Now filter based on topics.\n            filtered = filtered.filter(function(log) {\n              var keep = true;\n              for (var i = 0; i < expectedTopics.length; i++) {\n                var expectedTopic = expectedTopics[i];\n                var logTopic = log.topics[i];\n                if (expectedTopic == null) {\n                  continue;\n                }\n                var isMatch = Array.isArray(expectedTopic)\n                  ? expectedTopic.includes(logTopic)\n                  : expectedTopic === logTopic;\n                if (i >= log.topics.length || !isMatch) {\n                  keep = false;\n                  break;\n                }\n              }\n              return keep;\n            });\n\n            logs.push.apply(logs, filtered);\n\n            current += 1;\n            finished();\n          });\n        },\n        function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          logs = logs.map(function(log) {\n            return log.toJSON();\n          });\n\n          callback(err, logs);\n        }\n      );\n    }\n  );\n};\n\n// Note: Snapshots have 1-based ids.\nStateManager.prototype.snapshot = function(callback) {\n  var self = this;\n\n  this.blockchain.getHeight(function(err, blockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.snapshots.push({\n      blockNumber: blockNumber,\n      timeAdjustment: self.blockchain.timeAdjustment\n    });\n\n    self.logger.log(\"Saved snapshot #\" + self.snapshots.length);\n\n    callback(null, to.hex(self.snapshots.length));\n  });\n};\n\nStateManager.prototype.revert = function(snapshotId, callback) {\n  var self = this;\n\n  // Convert from hex.\n  snapshotId = utils.bufferToInt(snapshotId);\n\n  this.logger.log(\"Reverting to snapshot #\" + snapshotId);\n\n  if (snapshotId > this.snapshots.length) {\n    return false;\n  }\n\n  // Convert to zero based.\n  snapshotId = snapshotId - 1;\n  var timeAdjustment = this.snapshots[snapshotId].timeAdjustment;\n\n  // Loop through each snapshot with a higher id than the current one.\n  async.whilst(\n    function() {\n      return self.snapshots.length > snapshotId;\n    },\n    function(nextSnapshot) {\n      var snapshot = self.snapshots.pop();\n\n      // For each snapshot, asynchronously pop off the blocks it represents.\n      async.during(\n        function(doneWithTest) {\n          self.blockchain.getHeight(function(err, blockNumber) {\n            if (err) {\n              return doneWithTest(err);\n            }\n\n            doneWithTest(null, blockNumber > snapshot.blockNumber);\n          });\n        },\n        function(nextBlock) {\n          self.blockchain.popBlock(function(err) {\n            if (err) {\n              return nextBlock(err);\n            }\n            nextBlock();\n          });\n        },\n        nextSnapshot\n      );\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Pending transactions are removed when you revert.\n      self.blockchain.clearPendingTransactions();\n      // The time adjustment is restored to its prior state\n      self.blockchain.timeAdjustment = timeAdjustment;\n\n      callback(null, true);\n    }\n  );\n};\n\nStateManager.prototype.hasContractCode = function(address, callback) {\n  this.vm.stateManager.getContractCode(address, function(err, result) {\n    if (err != null) {\n      callback(err, false);\n    } else {\n      callback(null, true);\n    }\n  });\n};\n\nStateManager.prototype.startMining = function(callback) {\n  if (this.is_mining) {\n    callback();\n    this.logger.log(\"Warning: startMining called when miner was already started\");\n    return;\n  }\n\n  this.is_mining = true;\n\n  if (this.is_mining_on_interval) {\n    this.mineOnInterval();\n    callback();\n  } else {\n    this.processBlocks(callback);\n  }\n};\n\nStateManager.prototype.stopMining = function(callback) {\n  if (this.is_mining) {\n    if (this._minerCancellationToken) {\n      this._minerCancellationToken.cancelled = true;\n      this._minerCancellationToken = null;\n    }\n    this.is_mining = false;\n    clearTimeout(this.mining_interval_timeout);\n    this.mining_interval_timeout = null;\n  } else {\n    this.logger.log(\"Warning: stopMining called when miner was already stopped\");\n  }\n  callback && callback();\n};\n\nStateManager.prototype.isUnlocked = function(address) {\n  return this.unlocked_accounts[address.toLowerCase()] != null;\n};\n\nStateManager.prototype.createTransactionWithCorrectNonce = function(tx, from, callback) {\n  // account for transactions waiting in the tx queue\n  this.blockchain.getQueuedNonce(from, (err, expectedNonce) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const validateNonce = (tx, expectedNonce) => {\n      if (tx.validateNonce(expectedNonce)) {\n        return Promise.resolve(tx);\n      } else {\n        const expected = to.number(expectedNonce);\n        const actual = to.number(tx.nonce);\n        return Promise.reject(\n          new TXRejectedError(\n            `the tx doesn't have the correct nonce. account has nonce of: ${expected} tx has nonce of: ${actual}`\n          )\n        );\n      }\n    };\n    const done = (tx) => callback(null, tx);\n\n    if (tx.isSigned()) {\n      validateNonce(tx, expectedNonce)\n        .then(done)\n        .catch(callback);\n    } else {\n      const sign = (tx) => {\n        // we need to sign transactions if they haven't been signed already\n        // but we never sign fake transactions\n        if (!tx.isFake() && !tx.isSigned()) {\n          const account = this.accounts[from];\n          if (account) {\n            tx.sign(account.secretKey);\n          }\n        }\n        return Promise.resolve(tx);\n      };\n\n      // Validate the tx's nonce and then sign the transaction.\n      // By signing this transaction now we ensure all future calls to tx.hash()\n      // return the same signed transaction hash. It's sort of an unintuitive\n      // quirk of etheremjs-tx that:\n      //   tx.hash(includeSignature);\n      //   tx.sign(secretKey);\n      //   tx.hash(includeSignature);\n      // will produce different hashes.\n      if (tx.nonce.length === 0) {\n        // Since this transaction is unsigned and the nonce was not defined\n        // we can go ahead and change the nonce and not worry about\n        // invalidating the tx hash the client may be expecting (automatic nonce\n        // calculation should have been expected by the client in this case).\n        tx.nonce = expectedNonce;\n        sign(tx).then(done);\n      } else {\n        validateNonce(tx, expectedNonce)\n          .then(sign)\n          .then(done)\n          .catch(callback);\n      }\n    }\n  });\n};\nmodule.exports = StateManager;\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-tx/fake\");","module.exports = require(\"assert\");","module.exports = require(\"rlp\");","module.exports = require(\"seedrandom\");","module.exports = require(\"bip39\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"scrypt.js\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"bs58check\");","'use strict';\n\nvar HDKey = require('hdkey');\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","module.exports = require(\"hdkey\");","module.exports = require(\"ethereumjs-vm\");","module.exports = require(\"heap\");","var LevelUpArrayAdapter = require(\"./database/leveluparrayadapter\");\nvar LevelUpObjectAdapter = require(\"./database/levelupobjectadapter\");\nvar levelup = require(\"levelup\");\nvar encode = require(\"encoding-down\");\nvar filedown = require(\"./database/filedown\");\nvar cachedown = require(\"cachedown\");\nvar txserializer = require(\"./database/txserializer\");\nvar blockserializer = require(\"./database/blockserializer\");\nvar bufferserializer = require(\"./database/bufferserializer\");\nvar BlockLogsSerializer = require(\"./database/blocklogsserializer\");\nvar ReceiptSerializer = require(\"./database/receiptserializer\");\nvar tmp = require(\"tmp\");\n\nfunction Database(options) {\n  this.options = options;\n  this.directory = null;\n}\n\nDatabase.prototype.initialize = function(callback) {\n  var self = this;\n\n  function getDir(cb) {\n    if (self.options.db_path) {\n      cb(null, self.options.db_path);\n    } else {\n      tmp.dir(cb);\n    }\n  }\n\n  getDir(function(err, directory) {\n    if (err) {\n      return callback(err);\n    }\n    const levelupOptions = { valueEncoding: \"json\" };\n    if (self.options.db) {\n      const store = self.options.db;\n      levelup(store, levelupOptions, finishInitializing);\n    } else {\n      self.directory = directory;\n      const store = encode(cachedown(directory, filedown).maxSize(100), levelupOptions);\n      levelup(store, {}, finishInitializing);\n    }\n  });\n\n  function finishInitializing(err, db) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db = db;\n\n    // Blocks, keyed by array index (not necessarily by block number) (0-based)\n    self.blocks = new LevelUpArrayAdapter(\"blocks\", self.db, blockserializer);\n\n    // Logs triggered in each block, keyed by block id (ids in the blocks array; not necessarily block number) (0-based)\n    self.blockLogs = new LevelUpArrayAdapter(\"blockLogs\", self.db, new BlockLogsSerializer(self));\n\n    // Block hashes -> block ids (ids in the blocks array; not necessarily block number) for quick lookup\n    self.blockHashes = new LevelUpObjectAdapter(\"blockHashes\", self.db);\n\n    // Transaction hash -> transaction objects\n    self.transactions = new LevelUpObjectAdapter(\"transactions\", self.db, txserializer);\n\n    // Transaction hash -> transaction receipts\n    self.transactionReceipts = new LevelUpObjectAdapter(\"transactionReceipts\", self.db, new ReceiptSerializer(self));\n\n    self.trie_db = new LevelUpObjectAdapter(\"trie_db\", self.db, bufferserializer, bufferserializer);\n\n    callback();\n  }\n};\n\nDatabase.prototype.close = function(callback) {\n  callback();\n};\n\nmodule.exports = Database;\n","var Sublevel = require(\"level-sublevel\");\nconst { LevelUpOutOfRangeError, BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\n// Level up adapter that looks like an array. Doesn't support inserts.\n\nfunction LevelUpArrayAdapter(name, db, serializer) {\n  this.db = Sublevel(db);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.serializer = serializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpArrayAdapter.prototype.length = function(callback) {\n  this.db.get(\"length\", function(err, result) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, 0);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, result);\n  });\n};\n\nLevelUpArrayAdapter.prototype._get = function(key, callback) {\n  var self = this;\n  this.db.get(key, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n    self.serializer.decode(val, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype._put = function(key, value, callback) {\n  var self = this;\n  this.serializer.encode(value, function(err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n    self.db.put(key, encoded, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.get = function(index, callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    if (index >= length) {\n      // index out of range\n      let RangeError =\n        self.name === \"blocks\"\n          ? new BlockOutOfRangeError(index, length)\n          : new LevelUpOutOfRangeError(self.name, index, length);\n      return callback(RangeError);\n    }\n    self._get(index, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.push = function(val, callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    // TODO: Do this in atomic batch.\n    self._put(length + \"\", val, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.put(\"length\", length + 1, callback);\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.pop = function(callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var newLength = length - 1;\n\n    // TODO: Do this in atomic batch.\n    self._get(newLength + \"\", function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.del(newLength + \"\", function(err) {\n        if (err) {\n          return callback(err);\n        }\n        self.db.put(\"length\", newLength, function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, val);\n        });\n      });\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.last = function(callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (length === 0) {\n      return callback(null, null);\n    }\n\n    self._get(length - 1 + \"\", callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.first = function(callback) {\n  this._get(\"0\", callback);\n};\n\nmodule.exports = LevelUpArrayAdapter;\n","var Sublevel = require(\"level-sublevel\");\nvar async = require(\"async\");\n\nfunction LevelUpObjectAdapter(name, db, valueserializer, keyserializer, options) {\n  this.db = Sublevel(db, options);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.valueserializer = valueserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n  this.keyserializer = keyserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpObjectAdapter.prototype.get = function(key, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.get(encodedKey, function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.valueserializer.decode(val, function(err, decodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, decodedValue);\n      });\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.put = function(key, value, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.valueserializer.encode(value, function(err, encoded) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.db.put(encodedKey, encoded, callback);\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.set = LevelUpObjectAdapter.prototype.put;\n\nLevelUpObjectAdapter.prototype.del = function(key, callback) {\n  var self = this;\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.del(encodedKey, callback);\n  });\n};\n\nLevelUpObjectAdapter.prototype.batch = function(array, options, callback) {\n  var self = this;\n\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nLevelUpObjectAdapter.prototype.isOpen = function() {\n  return true;\n};\n\nmodule.exports = LevelUpObjectAdapter;\n","module.exports = require(\"levelup\");","module.exports = require(\"encoding-down\");","var util = require(\"util\");\nvar AbstractLevelDOWN = require(\"abstract-leveldown\").AbstractLevelDOWN;\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nutil.inherits(FileDown, AbstractLevelDOWN);\n\nfunction FileDown(location) {\n  this.location = location;\n  AbstractLevelDOWN.call(this, location);\n}\n\nFileDown.prototype._open = function(options, callback) {\n  var self = this;\n  callback(null, self);\n};\n\nFileDown.prototype._put = function(key, value, options, callback) {\n  fs.writeFile(path.join(this.location, key), value, \"utf8\", callback);\n};\n\nFileDown.prototype._get = function(key, options, callback) {\n  fs.readFile(path.join(this.location, key), \"utf8\", function(err, data) {\n    if (err) {\n      return callback(new Error(\"NotFound\"));\n    }\n    callback(null, data);\n  });\n};\n\nFileDown.prototype._del = function(key, options, callback) {\n  fs.unlink(path.join(this.location, key), function(err) {\n    // Ignore when we try to delete a file that doesn't exist.\n    // I'm not sure why this happens. Worth looking into.\n    if (err) {\n      if (err.message.indexOf(\"ENOENT\") >= 0) {\n        return callback();\n      } else {\n        return callback(err);\n      }\n    }\n    callback();\n  });\n};\n\nFileDown.prototype._batch = function(array, options, callback) {\n  var self = this;\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, options, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nmodule.exports = function(location) {\n  return new FileDown(location);\n};\n","module.exports = require(\"abstract-leveldown\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"cachedown\");","var txserializer = require(\"./txserializer\");\nvar async = require(\"async\");\nvar Block = require(\"ethereumjs-block\");\n\nmodule.exports = {\n  encode: function(block, done) {\n    var encoded = block.toJSON(true);\n\n    async.map(\n      block.transactions,\n      function(tx, finished) {\n        txserializer.encode(tx, finished);\n      },\n      function(err, transactions) {\n        if (err) {\n          return done(err);\n        }\n        encoded.transactions = transactions;\n        done(null, encoded);\n      }\n    );\n  },\n  decode: function(json, done) {\n    var transactions = json.transactions;\n    json.transactions = [];\n\n    var block = new Block(json);\n\n    async.eachSeries(\n      transactions,\n      function(txJson, finished) {\n        txserializer.decode(txJson, function(err, tx) {\n          if (err) {\n            return finished(err);\n          }\n          block.transactions.push(tx);\n          finished();\n        });\n      },\n      function(err) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, block);\n      }\n    );\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar to = require(\"../utils/to\");\n\nmodule.exports = {\n  encode: function(val, cb) {\n    var hex = to.hex(val);\n    cb(null, hex);\n  },\n  decode: function(json, cb) {\n    cb(null, utils.toBuffer(json));\n  }\n};\n","var Log = require(\"../utils/log\");\nvar async = require(\"async\");\n\nfunction BlockLogsSerializer(database) {\n  this.database = database;\n}\n\nBlockLogsSerializer.prototype.encode = function(logs, done) {\n  logs = logs.map(function(log) {\n    return log.toJSON();\n  });\n\n  done(null, logs);\n};\n\nBlockLogsSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  if (json.length === 0) {\n    return done(null, []);\n  }\n\n  this.database.blockHashes.get(json[0].blockHash, function(err, blockIndex) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blocks.get(blockIndex, function(err, block) {\n      if (err) {\n        return done(err);\n      }\n\n      async.map(\n        json,\n        function(log, finished) {\n          finished(\n            null,\n            new Log({\n              block: block,\n              logIndex: log.logIndex,\n              transactionIndex: log.transactionIndex,\n              transactionHash: log.transactionHash,\n              address: log.address,\n              data: log.data,\n              topics: log.topics,\n              type: log.type\n            })\n          );\n        },\n        function(err, logs) {\n          if (err) {\n            return done(err);\n          }\n          done(null, logs);\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = BlockLogsSerializer;\n","var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs,\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n","module.exports = require(\"tmp\");","var BlockchainDouble = require(\"../blockchain_double.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./log.js\");\nvar Receipt = require(\"./receipt.js\");\nvar utils = require(\"ethereumjs-util\");\nvar ForkedStorageTrie = require(\"./forkedstoragetrie.js\");\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\nvar Transaction = require(\"./transaction\");\nvar async = require(\"async\");\nvar BN = require(\"bn.js\");\n\nvar inherits = require(\"util\").inherits;\n\ninherits(ForkedBlockchain, BlockchainDouble);\n\nfunction ForkedBlockchain(options) {\n  this.options = options || {};\n\n  if (options.fork == null) {\n    throw new Error(\"ForkedBlockchain must be passed a fork parameter.\");\n  }\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n  this.forkVersion = null;\n\n  if (typeof this.fork === \"string\") {\n    if (this.fork.indexOf(\"@\") >= 0) {\n      var split = this.fork.split(\"@\");\n      this.fork = split[0];\n      this.forkBlockNumber = parseInt(split[1]);\n    }\n\n    this.fork = new Web3.providers.HttpProvider(this.fork);\n  }\n\n  this.time = options.time;\n  this.storageTrieCache = {};\n\n  BlockchainDouble.call(this, options);\n\n  this.createVMFromStateTrie = function() {\n    var vm = BlockchainDouble.prototype.createVMFromStateTrie.apply(this, arguments);\n    this.patchVM(vm);\n    return vm;\n  };\n\n  this.web3 = new Web3(this.fork);\n}\n\nForkedBlockchain.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.web3.eth.net.getId(function(err, version) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.forkVersion = version;\n\n    BlockchainDouble.prototype.initialize.call(self, accounts, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.patchVM(self.vm);\n\n      callback();\n    });\n  });\n};\nForkedBlockchain.prototype.patchVM = function(vm) {\n  // Unfortunately forking requires a bit of monkey patching, but it gets the job done.\n  vm.stateManager._lookupStorageTrie = this.lookupStorageTrie.bind(this);\n  vm.stateManager._cache._lookupAccount = this.getAccount.bind(this);\n  vm.stateManager.getContractCode = this.getCode.bind(this);\n};\n\nForkedBlockchain.prototype.createStateTrie = function(db, root) {\n  return new ForkedStorageTrie(db, root, {\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber,\n    blockchain: this\n  });\n};\n\nForkedBlockchain.prototype.createGenesisBlock = function(callback) {\n  var self = this;\n  var blockNumber = this.forkBlockNumber || \"latest\";\n\n  self.web3.eth.getBlock(blockNumber, function(err, json) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If no start time was passed, set the time to where we forked from.\n    // We only want to do this if a block was explicitly passed. If a block\n    // number wasn't passed, then we're using the last block and the current time.\n    if (!self.time && self.forkBlockNumber) {\n      self.time = self.options.time = new Date(to.number(json.timestamp) * 1000);\n      self.setTime(self.time);\n    }\n\n    blockNumber = to.hex(json.number);\n\n    // Update the relevant block numbers\n    self.forkBlockNumber = self.options.forkBlockNumber = blockNumber;\n    self.stateTrie.forkBlockNumber = blockNumber;\n\n    self.createBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      block.header.number = utils.toBuffer(to.number(json.number) + 1);\n      block.header.parentHash = utils.toBuffer(json.hash);\n\n      callback(null, block);\n    });\n  });\n};\n\nForkedBlockchain.prototype.createForkedStorageTrie = function(address) {\n  address = to.hex(address);\n\n  var trie = new ForkedStorageTrie(this.data.trie_db, null, {\n    address: address,\n    stateTrie: this.stateTrie,\n    blockchain: this,\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber\n  });\n\n  this.storageTrieCache[address] = trie;\n\n  return trie;\n};\n\nForkedBlockchain.prototype.lookupStorageTrie = function(address, callback) {\n  address = to.hex(address);\n\n  if (this.storageTrieCache[address] != null) {\n    return callback(null, this.storageTrieCache[address]);\n  }\n\n  callback(null, this.createForkedStorageTrie(address));\n};\n\nForkedBlockchain.prototype.isFallbackBlock = function(value, callback) {\n  var self = this;\n\n  self.getEffectiveBlockNumber(value, function(err, number) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, number <= to.number(self.forkBlockNumber));\n  });\n};\n\nForkedBlockchain.prototype.isBlockHash = function(value) {\n  return typeof value === \"string\" && value.indexOf(\"0x\") === 0 && value.length > 42;\n};\n\nForkedBlockchain.prototype.isFallbackBlockHash = function(value, callback) {\n  var self = this;\n\n  if (!this.isBlockHash(value)) {\n    return callback(null, false);\n  }\n\n  self.data.blockHashes.get(value, function(err, blockIndex) {\n    if (err) {\n      if (err.notFound) {\n        // If the block isn't found in our database, then it must be a fallback block.\n        return callback(null, true);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, false);\n  });\n};\n\nForkedBlockchain.prototype.getFallbackBlock = function(numberOrHash, cb) {\n  var self = this;\n\n  // This function sometimes gets passed hex values that aren't long enough to\n  // be a block hash. In that case, let's convert them to a big number so Web3\n  // doesn't get stopped up.\n  if (typeof numberOrHash === \"string\" && numberOrHash.length < 66) {\n    numberOrHash = self.web3.utils.toBN(numberOrHash);\n  }\n\n  self.web3.eth.getBlock(numberOrHash, true, function(err, json) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (json == null) {\n      return cb();\n    }\n\n    var block = new Block();\n\n    block.header.parentHash = utils.toBuffer(json.parentHash);\n    block.header.uncleHash = utils.toBuffer(json.sha3Uncles);\n    block.header.coinbase = utils.toBuffer(json.miner);\n    block.header.stateRoot = utils.toBuffer(json.stateRoot); // Should we include the following three?\n    block.header.transactionTrie = utils.toBuffer(json.transactionsRoot);\n    block.header.receiptTrie = utils.toBuffer(json.receiptsRoot);\n    block.header.bloom = utils.toBuffer(json.logsBloom);\n    block.header.difficulty = utils.toBuffer(\"0x\" + json.totalDifficulty.toString(16)); // BigNumber\n    block.header.number = utils.toBuffer(json.number);\n    block.header.gasLimit = utils.toBuffer(json.gasLimit);\n    block.header.gasUsed = utils.toBuffer(json.gasUsed);\n    block.header.timestamp = utils.toBuffer(json.timestamp);\n    block.header.extraData = utils.toBuffer(json.extraData);\n\n    (json.transactions || []).forEach(function(txJson, index) {\n      block.transactions.push(Transaction.fromJSON(txJson, Transaction.types.real));\n    });\n\n    // Fake block. Let's do the worst.\n    // TODO: Attempt to fill out all block data so as to produce the same hash! (can we?)\n    block.hash = function() {\n      return utils.toBuffer(json.hash);\n    };\n\n    cb(null, block);\n  });\n};\n\nForkedBlockchain.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  this.isFallbackBlockHash(number, function(err, isFallbackBlockHash) {\n    if (err) {\n      return callback(err);\n    }\n    if (isFallbackBlockHash) {\n      return self.getFallbackBlock(number, callback);\n    }\n\n    self.isFallbackBlock(number, function(err, isFallbackBlock) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (isFallbackBlock) {\n        return self.getFallbackBlock(number, callback);\n      }\n\n      // If we don't have string-based a block hash, turn what we do have into a number\n      // before sending it to getBlock.\n      function getBlockReference(value, callback) {\n        if (!self.isBlockHash(value)) {\n          self.getRelativeBlockNumber(value, callback);\n        } else {\n          callback(null, value);\n        }\n      }\n\n      getBlockReference(number, function(err, blockReference) {\n        if (err) {\n          return callback(err);\n        }\n\n        BlockchainDouble.prototype.getBlock.call(self, blockReference, callback);\n      });\n    });\n  });\n};\n\nForkedBlockchain.prototype.getStorage = function(address, key, number, callback) {\n  this.lookupStorageTrie(address, function(err, trie) {\n    if (err) {\n      return callback(err);\n    }\n    trie.get(key, callback);\n  });\n};\n\nForkedBlockchain.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  if (!number) {\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n      // If we've stored the value and we're looking at one of our stored blocks,\n      // get it from our stored data.\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getCode.call(self, address, number, callback);\n      } else {\n        // Else, we need to fetch it from web3. If our number is greater than\n        // the fork, let's just use \"latest\".\n        if (number > to.number(self.forkBlockNumber)) {\n          number = \"latest\";\n        }\n\n        self.fetchCodeFromFallback(address, number, function(err, code) {\n          if (code) {\n            code = utils.toBuffer(code);\n          }\n          callback(err, code);\n        });\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    // If the account doesn't exist in our state trie, get it off the wire.\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getAccount.call(self, address, number, function(err, acc) {\n          if (err) {\n            return callback(err);\n          }\n          callback(null, acc);\n        });\n      } else {\n        self.fetchAccountFromFallback(address, number, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransaction = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransaction.call(this, hash, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n    if (tx != null) {\n      return callback(null, tx);\n    }\n\n    self.web3.eth.getTransaction(hash, function(err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result) {\n        result = Transaction.fromJSON(result, Transaction.types.signed);\n      }\n\n      callback(null, result);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransactionReceipt = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransactionReceipt.call(this, hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n    if (receipt) {\n      return callback(null, receipt);\n    }\n\n    self.web3.eth.getTransactionReceipt(hash, function(err, receiptJson) {\n      if (err) {\n        return callback(err);\n      }\n      if (!receiptJson) {\n        return callback();\n      }\n\n      async.parallel(\n        {\n          tx: self.getTransaction.bind(self, hash),\n          block: self.getBlock.bind(self, receiptJson.blockNumber)\n        },\n        function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          var logs = receiptJson.logs.map(function(log) {\n            return new Log(log);\n          });\n\n          var receipt = new Receipt(\n            result.tx,\n            result.block,\n            logs,\n            receiptJson.gasUsed,\n            receiptJson.cumulativeGasUsed,\n            receiptJson.contractAddress,\n            receiptJson.status,\n            to.hex(receiptJson.logsBloom)\n          );\n\n          callback(null, receipt);\n        }\n      );\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchAccountFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  async.parallel(\n    {\n      code: this.fetchCodeFromFallback.bind(this, address, blockNumber),\n      balance: this.fetchBalanceFromFallback.bind(this, address, blockNumber),\n      nonce: this.fetchNonceFromFallback.bind(this, address, blockNumber)\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var code = results.code;\n      var balance = results.balance;\n      var nonce = results.nonce;\n\n      var account = new Account({\n        nonce: nonce,\n        balance: balance\n      });\n\n      // This puts the code on the trie, keyed by the hash of the code.\n      // It does not actually link an account to code in the trie.\n      account.setCode(self.stateTrie, utils.toBuffer(code), function(err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, account);\n      });\n    }\n  );\n};\n\nForkedBlockchain.prototype.fetchCodeFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getCode(address, safeBlockNumber, function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n\n      code = \"0x\" + utils.toBuffer(code).toString(\"hex\");\n      callback(null, code);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchBalanceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getBalance(address, safeBlockNumber, function(err, balance) {\n      if (err) {\n        return callback(err);\n      }\n\n      balance = \"0x\" + new BN(balance).toString(16);\n      callback(null, balance);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchNonceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getTransactionCount(address, safeBlockNumber, function(err, nonce) {\n      if (err) {\n        return callback(err);\n      }\n\n      nonce = \"0x\" + self.web3.utils.toBN(nonce).toString(16);\n      callback(null, nonce);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getHeight = function(callback) {\n  this.latestBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.number(block.header.number));\n  });\n};\n\nForkedBlockchain.prototype.getRelativeBlockNumber = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, effective - to.number(self.forkBlockNumber) - 1);\n  });\n};\n\nForkedBlockchain.prototype.getSafeFallbackBlockNumber = function(blockNumber, callback) {\n  var forkBlockNumber = to.number(this.forkBlockNumber);\n\n  if (blockNumber == null) {\n    return callback(null, forkBlockNumber);\n  }\n\n  this.getEffectiveBlockNumber(blockNumber, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    if (effective > forkBlockNumber) {\n      effective = forkBlockNumber;\n    }\n\n    callback(null, effective);\n  });\n};\n\nForkedBlockchain.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.getRelativeBlockNumber(effective, function(err, relative) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (relative < 0) {\n        self.getBlock(number, function(err, block) {\n          if (err) {\n            return callback(err);\n          }\n\n          self.web3.currentProvider.send(\n            {\n              jsonrpc: \"2.0\",\n              method: \"eth_getLogs\",\n              params: [\n                {\n                  fromBlock: to.hex(number),\n                  toBlock: to.hex(number)\n                }\n              ],\n              id: new Date().getTime()\n            },\n            function(err, res) {\n              if (err) {\n                return callback(err);\n              }\n\n              var logs = res.result.map(function(log) {\n                // To make this result masquerade as the right information.\n                log.block = block;\n                return new Log(log);\n              });\n\n              callback(null, logs);\n            }\n          );\n        });\n      } else {\n        BlockchainDouble.prototype.getBlockLogs.call(self, relative, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype._checkpointTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._checkpointTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n    trie.customCheckpoint();\n  });\n};\n\nForkedBlockchain.prototype._revertTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._revertTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n\n    // We're trying to revert to a point before this trie was created.\n    // Let's just remove the trie.\n    if (trie.checkpoints.length === 0) {\n      delete self.storageTrieCache[address];\n    } else {\n      trie.customRevert();\n    }\n  });\n};\n\nmodule.exports = ForkedBlockchain;\n","var MerklePatriciaTree = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\n\ninherits(ForkedStorageTrie, MerklePatriciaTree);\n\nfunction ForkedStorageTrie(db, root, options) {\n  MerklePatriciaTree.call(this, db, root);\n\n  this.address = options.address;\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n\n  this.blockchain = options.blockchain;\n\n  this.web3 = new Web3();\n  this.web3.setProvider(this.fork);\n\n  this.checkpoints = [];\n}\n\nForkedStorageTrie.prototype.keyExists = function(key, callback) {\n  key = utils.toBuffer(key);\n\n  this.findPath(key, function(err, node, remainder, stack) {\n    var exists = false;\n    if (node && remainder.length === 0) {\n      exists = true;\n    }\n    callback(err, exists);\n  });\n};\n\n// Note: This overrides a standard method whereas the other methods do not.\nForkedStorageTrie.prototype.get = function(key, blockNumber, callback) {\n  var self = this;\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = self.forkBlockNumber;\n  }\n\n  // For geth; https://github.com/ethereumjs/ethereumjs-util/issues/79\n  blockNumber = to.rpcQuantityHexString(blockNumber);\n\n  key = utils.toBuffer(key);\n\n  // If the account doesn't exist in our state trie, get it off the wire.\n  this.keyExists(key, function(err, exists) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (exists) {\n      MerklePatriciaTree.prototype.get.call(self, key, function(err, r) {\n        callback(err, r);\n      });\n    } else {\n      // If this is the main trie, get the whole account.\n      if (self.address == null) {\n        self.blockchain.fetchAccountFromFallback(key, blockNumber, function(err, account) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, account.serialize());\n        });\n      } else {\n        self.web3.eth.getStorageAt(to.hex(self.address), to.hex(key), blockNumber, function(err, value) {\n          if (err) {\n            return callback(err);\n          }\n\n          value = utils.toBuffer(value);\n          value = utils.rlp.encode(value);\n\n          callback(null, value);\n        });\n      }\n    }\n  });\n};\n\n// I don't want checkpoints to be removed by commits.\n// Note: For some reason, naming this function checkpoint()\n// -- overriding the default function -- prevents it from\n// being called.\nForkedStorageTrie.prototype.customCheckpoint = function() {\n  this.checkpoints.push(this.root);\n};\n\nForkedStorageTrie.prototype.customRevert = function() {\n  this.root = this.checkpoints.pop();\n};\n\nmodule.exports = ForkedStorageTrie;\n","module.exports = require(\"web3-core\");","module.exports = require(\"web3-eth\");","module.exports = require(\"web3-net\");","module.exports = require(\"web3-eth-personal\");","module.exports = require(\"web3-shh\");","module.exports = require(\"web3-bzz\");","module.exports = require(\"web3-utils\");","module.exports = require(\"bn.js\");","module.exports = require(\"eth-sig-util\");","module.exports = {\n  // Mimics crypto.random bytes, but takes in a random number generator\n  // as its second parameter. rng is expected to be a function that takes\n  // no parameters and returns a result like Math.random().\n  // This is important because it allows for a seeded random number generator.\n  // Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.\n  randomBytes: function(length, rng) {\n    var buf = [];\n\n    for (var i = 0; i < length; i++) {\n      buf.push(rng() * 255);\n    }\n\n    return Buffer.from(buf);\n  },\n\n  randomAlphaNumericString: function(length, rng) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    let text = \"\";\n\n    for (var i = 0; i < length; i++) {\n      text += alphabet.charAt(Math.floor((rng || Math.random)() * alphabet.length));\n    }\n\n    return text;\n  }\n};\n","// this replaces `eth-block-tracker` in the provider-engine, as that block tracker is meant to work with\n// an external provider instance\n\nconst EventEmitter = require(\"events\");\nvar blockHelper = require(\"./utils/block_helper\");\n\nfunction GanacheBlockTracker(opts) {\n  opts = opts || {};\n  EventEmitter.apply(this);\n  if (!opts.blockchain) {\n    throw new Error(\"RpcBlockTracker - no blockchain specified.\");\n  }\n  if (!opts.blockchain.on) {\n    throw new Error(\"RpcBlockTracker - blockchain is not an EventEmitter.\");\n  }\n  this._blockchain = opts.blockchain;\n  this.start = this.start.bind(this);\n  this.stop = this.stop.bind(this);\n  this.getTrackingBlock = this.getTrackingBlock.bind(this);\n  this.awaitCurrentBlock = this.awaitCurrentBlock.bind(this);\n  this._setCurrentBlock = this._setCurrentBlock.bind(this);\n}\n\nGanacheBlockTracker.prototype = Object.create(EventEmitter.prototype);\nGanacheBlockTracker.prototype.constructor = GanacheBlockTracker;\n\nGanacheBlockTracker.prototype.getTrackingBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.getCurrentBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.awaitCurrentBlock = function() {\n  const self = this;\n  // return if available\n  if (this._currentBlock) {\n    return this._currentBlock;\n  }\n  // wait for \"sync\" event\n  return new Promise((resolve) => this.once(\"block\", resolve)).then(() => self._currentBlock);\n};\n\nGanacheBlockTracker.prototype.start = function(opts = {}) {\n  this._blockchain.on(\"block\", this._setCurrentBlock);\n  return Promise.resolve();\n};\n\nGanacheBlockTracker.prototype.stop = function() {\n  this._isRunning = false;\n  this._blockchain.removeListener(\"block\", this._setCurrentBlock);\n};\n\n//\n// private\n//\n\nGanacheBlockTracker.prototype._setCurrentBlock = function(newBlock) {\n  let block = blockHelper.toJSON(newBlock, true);\n  if (this._currentBlock && this._currentBlock.hash === block.hash) {\n    return;\n  }\n  const oldBlock = this._currentBlock;\n  this._currentBlock = block;\n  this.emit(\"latest\", block);\n  this.emit(\"sync\", { block, oldBlock });\n  this.emit(\"block\", block);\n};\n\nmodule.exports = GanacheBlockTracker;\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nvar Provider = require(\"./provider\");\nvar webSocketServer = require(\"./webSocketServer\");\nvar httpServer = require(\"./httpServer\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  create: function(options) {\n    options = _applyDefaultOptions(options || {});\n\n    var logger = options.logger;\n    var provider = new Provider(options);\n\n    var server = httpServer(provider, logger);\n    server.keepAliveTimeout = options.keepAliveTimeout;\n\n    let connectionCounter = 0;\n    const connections = {};\n    server.on(\"connection\", (conn) => {\n      let key = connectionCounter++;\n      connections[key] = conn;\n      conn.on(\"close\", () => delete connections[key]);\n    });\n\n    var oldListen = server.listen;\n\n    server.listen = function() {\n      var args = Array.prototype.slice.call(arguments);\n      var callback = function() {};\n      if (args.length > 0) {\n        var last = args[args.length - 1];\n        if (typeof last === \"function\") {\n          callback = args.pop();\n        }\n      }\n\n      var intermediary = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        server.provider.manager.waitForInitialization(callback);\n      };\n\n      args.push(intermediary);\n\n      oldListen.apply(server, args);\n    };\n\n    server.provider = provider;\n\n    if (options.ws) {\n      webSocketServer(server, provider, logger);\n    }\n\n    var oldClose = server.close;\n\n    server.close = function(callback) {\n      var args = Array.prototype.slice.call(arguments);\n      oldClose.apply(server, args);\n\n      server.provider.close(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        Object.keys(connections).forEach((key) => {\n          try {\n            connections[key].destroy();\n          } catch (error) {}\n        });\n      });\n    };\n\n    return server;\n  }\n};\n\nconst defaultOptions = {\n  logger: {\n    log: function() {}\n  },\n  ws: true,\n  keepAliveTimeout: 5000\n};\n\nvar _applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n","var WebSocketServer = require(\"websocket\").server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    try {\n      var payload = JSON.parse(message.utf8Data);\n    } catch (e) {\n      connection.reject(400, \"Bad Request\");\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        delete self.connections[connection.id].subscriptions[payload.params[0]];\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  const subscription = this.connectionsBySubscriptionId[notification.params.subscription];\n  // Safety check for subscription/connection.\n  if (subscription) {\n    subscription.connection.send(JSON.stringify(notification));\n  }\n};\n","module.exports = require(\"websocket\");","const http = require(\"http\");\nconst { rpcError } = require(\"./utils/to\");\n\nfunction createCORSResponseHeaders(method, requestHeaders) {\n  // https://fetch.spec.whatwg.org/#http-requests\n  const headers = {};\n  let isCORSRequest = requestHeaders.hasOwnProperty(\"origin\");\n  if (isCORSRequest) {\n    // OPTIONS preflight requests need a little extra treatment\n    if (method === \"OPTIONS\") {\n      // we only allow POST requests, so it doesn't matter which method the request is asking for\n      headers[\"Access-Control-Allow-Methods\"] = \"POST\";\n      // echo all requested access-control-request-headers back to the response\n      if (requestHeaders.hasOwnProperty(\"access-control-request-headers\")) {\n        headers[\"Access-Control-Allow-Headers\"] = requestHeaders[\"access-control-request-headers\"];\n      }\n      // Safari needs Content-Length = 0 for a 204 response otherwise it hangs forever\n      // https://github.com/expressjs/cors/pull/121#issue-130260174\n      headers[\"Content-Length\"] = 0;\n\n      // Make browsers and compliant clients cache the OPTIONS preflight response for 10\n      // minutes (this is the maximum time Chromium allows)\n      headers[\"Access-Control-Max-Age\"] = 600; // seconds\n    }\n\n    // From the spec: https://fetch.spec.whatwg.org/#http-responses\n    // \"For a CORS-preflight request, request’s credentials mode is always \"omit\",\n    // but for any subsequent CORS requests it might not be. Support therefore\n    // needs to be indicated as part of the HTTP response to the CORS-preflight request as well.\", so this\n    // header is added to all requests.\n    // Additionally, https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials,\n    // states that there aren't any HTTP Request headers that indicate you whether or not Request.withCredentials\n    // is set. Because web3@1.0.0-beta.35-? always sets `request.withCredentials = true` while Safari requires it be\n    // returned even when no credentials are set in the browser this header must always be return on all requests.\n    // (I've found that Chrome and Firefox don't actually require the header when credentials aren't set)\n    //  Regression Commit: https://github.com/ethereum/web3.js/pull/1722\n    //  Open Web3 Issue: https://github.com/ethereum/web3.js/issues/1802\n    headers[\"Access-Control-Allow-Credentials\"] = true;\n\n    // From the spec: \"It cannot be reliably identified as participating in the CORS protocol\n    // as the `Origin` header is also included for all requests whose method is neither\n    // `GET` nor `HEAD`.\"\n    // Explicitly set the origin instead of using *, since credentials\n    // can't be used in conjunction with *. This will always be set\n    /// for valid preflight requests.\n    headers[\"Access-Control-Allow-Origin\"] = requestHeaders.origin;\n  }\n  return headers;\n}\n\nfunction sendResponse(response, statusCode, headers, data) {\n  response.writeHead(statusCode, headers);\n  response.end(data);\n}\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        const headers = createCORSResponseHeaders(method, request.headers);\n\n        switch (method) {\n          case \"POST\":\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              sendResponse(response, 400, headers, \"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            // http connections do not support subscriptions\n            if (payload.method === \"eth_subscribe\" || payload.method === \"eth_unsubscribe\") {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 400, headers, rpcError(payload.id, -32000, \"notifications not supported\"));\n              break;\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              sendResponse(response, 200, headers, JSON.stringify(result));\n            });\n\n            break;\n          case \"OPTIONS\":\n            sendResponse(response, 204, headers);\n            break;\n          default:\n            headers[\"Content-Type\"] = \"text/plain\";\n            sendResponse(response, 400, headers, \"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n","module.exports = require(\"http\");"],"sourceRoot":""}